#!/usr/bin/env python3
"""
–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–≤–∏–∂–∫–∞, —Ä–µ–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ª–æ–≥–∏–∫—É.
"""

import asyncio
import sys
import time
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from breakout_bot.core.engine import OptimizedOrchestraEngine
from breakout_bot.core.state_machine import TradingState


class RealPipelineTest:
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–∫–æ–º –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏."""
    
    def __init__(self, preset_name: str = "breakout_v1"):
        self.preset_name = preset_name
        self.engine = None
        self.initial_state = None
        self.test_duration = 300  # 5 –º–∏–Ω—É—Ç
        
    async def run_real_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–∫–æ–º."""
        print("\n" + "="*80)
        print("üî• –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –¢–û–†–ì–û–í–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê")
        print("="*80 + "\n")
        
        try:
            # ===== –§–ê–ó–ê 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–û–ì–û –î–í–ò–ñ–ö–ê =====
            print("üì¶ –§–ê–ó–ê 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–û–ì–û –î–í–ò–ñ–ö–ê")
            print("-" * 80)
            
            self.engine = OptimizedOrchestraEngine(self.preset_name)
            await self.engine.initialize()
            
            print(f"‚úÖ –î–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print(f"   –ü—Ä–µ—Å–µ—Ç: {self.preset_name}")
            print(f"   Exchange: {self.engine.exchange_client.__class__.__name__}")
            paper_mode = getattr(self.engine.exchange_client, 'paper_mode', True)
            print(f"   Mode: {'Paper Trading' if paper_mode else 'Live Trading'}")
            print(f"   –ö–∞–ø–∏—Ç–∞–ª: ${self.engine.starting_equity:,.2f}")
            print(f"   –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.engine.state_machine.current_state.value}")
            
            self.initial_state = self.engine.state_machine.current_state
            
            # ===== –§–ê–ó–ê 2: –ó–ê–ü–£–°–ö –î–í–ò–ñ–ö–ê =====
            print("\nüì¶ –§–ê–ó–ê 2: –ó–ê–ü–£–°–ö –î–í–ò–ñ–ö–ê")
            print("-" * 80)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫ –≤ —Ñ–æ–Ω–µ
            engine_task = asyncio.create_task(self.engine.start())
            
            print(f"‚úÖ –î–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω")
            print(f"   –¢–µ—Å—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å {self.test_duration} —Å–µ–∫—É–Ω–¥")
            print(f"   –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π...\n")
            
            # ===== –§–ê–ó–ê 3: –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ï–ê–õ–¨–ù–û–ô –†–ê–ë–û–¢–´ =====
            print("üìä –§–ê–ó–ê 3: –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ï–ê–õ–¨–ù–û–ô –†–ê–ë–û–¢–´ –ü–ê–ô–ü–õ–ê–ô–ù–ê")
            print("-" * 80 + "\n")
            
            await self._monitor_pipeline(self.test_duration)
            
            # ===== –§–ê–ó–ê 4: –û–°–¢–ê–ù–û–í–ö–ê –ò –ê–ù–ê–õ–ò–ó =====
            print("\nüì¶ –§–ê–ó–ê 4: –û–°–¢–ê–ù–û–í–ö–ê –ò –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
            print("-" * 80)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–æ–∫
            await self.engine.stop()
            engine_task.cancel()
            try:
                await engine_task
            except asyncio.CancelledError:
                pass
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await self._analyze_results()
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
        finally:
            if self.engine:
                try:
                    await self.engine.stop()
                except:
                    pass
    
    async def _monitor_pipeline(self, duration: int):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞."""
        start_time = time.time()
        last_state = self.engine.state_machine.current_state
        state_history = []
        
        check_interval = 5  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        while time.time() - start_time < duration:
            current_state = self.engine.state_machine.current_state
            elapsed = int(time.time() - start_time)
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–º–µ–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
            if current_state != last_state:
                transition = {
                    'time': elapsed,
                    'from': last_state.value,
                    'to': current_state.value,
                    'timestamp': time.time()
                }
                state_history.append(transition)
                
                print(f"‚ö° [{elapsed}s] –ü–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {last_state.value} ‚Üí {current_state.value}")
                
                # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
                await self._log_state_details(current_state)
                
                last_state = current_state
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
            if elapsed % 30 == 0 and elapsed > 0:
                print(f"\nüìä [{elapsed}s] –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")
                await self._log_current_status()
            
            await asyncio.sleep(check_interval)
        
        self.state_history = state_history
    
    async def _log_state_details(self, state: TradingState):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        try:
            if state == TradingState.SCANNING:
                print(f"   üîç –ù–∞—á–∞—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤...")
                
            elif state == TradingState.LEVEL_BUILDING:
                scan_results = getattr(self.engine.scanning_manager, 'last_scan_results', [])
                if scan_results:
                    print(f"   üìê –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è {len(scan_results)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
                    for result in scan_results[:3]:  # –ü–µ—Ä–≤—ã–µ 3
                        print(f"      - {result.symbol}: score={result.score:.2%}")
                
            elif state == TradingState.SIGNAL_WAIT:
                signals = self.engine.signal_manager.active_signals
                print(f"   ‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
                for symbol, signal in list(signals.items())[:3]:
                    print(f"      - {symbol}: {signal.side} @ ${signal.entry:,.2f} (conf: {signal.confidence:.2%})")
                
            elif state == TradingState.SIZING:
                print(f"   üí∞ –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–π...")
                
            elif state == TradingState.EXECUTION:
                print(f"   üéØ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤...")
                
            elif state == TradingState.MANAGING:
                positions = self.engine.position_manager.open_positions
                print(f"   üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏: {len(positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö")
                for pos in positions[:3]:
                    pnl_status = "üü¢" if pos.pnl_usd > 0 else "üî¥"
                    print(f"      {pnl_status} {pos.symbol}: ${pos.pnl_usd:,.2f} ({pos.pnl_r:.2f}R)")
                    
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π: {e}")
    
    async def _log_current_status(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        try:
            current_state = self.engine.state_machine.current_state
            print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.value}")
            
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            scan_results = getattr(self.engine.scanning_manager, 'last_scan_results', [])
            print(f"   –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(scan_results)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            
            # –°–∏–≥–Ω–∞–ª—ã
            signals = self.engine.signal_manager.active_signals
            print(f"   –°–∏–≥–Ω–∞–ª—ã: {len(signals)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            
            # –ü–æ–∑–∏—Ü–∏–∏
            positions = self.engine.position_manager.open_positions
            if positions:
                total_pnl = sum(p.pnl_usd for p in positions)
                print(f"   –ü–æ–∑–∏—Ü–∏–∏: {len(positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö (PnL: ${total_pnl:,.2f})")
            else:
                print(f"   –ü–æ–∑–∏—Ü–∏–∏: –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö")
            
            # –ë–∞–ª–∞–Ω—Å
            balance = getattr(self.engine, 'current_equity', self.engine.starting_equity)
            print(f"   –ë–∞–ª–∞–Ω—Å: ${balance:,.2f}")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def _analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞."""
        print("\n" + "="*80)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê")
        print("="*80 + "\n")
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if hasattr(self, 'state_history') and self.state_history:
            print("üìà –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π:")
            for transition in self.state_history:
                print(f"   [{transition['time']}s] {transition['from']} ‚Üí {transition['to']}")
            print(f"\n   –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {len(self.state_history)}")
        else:
            print("‚ö†Ô∏è  –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –î–≤–∏–∂–æ–∫ –∑–∞—Å—Ç—Ä—è–ª –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            print("   - –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ")
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        scan_results = getattr(self.engine.scanning_manager, 'last_scan_results', [])
        if scan_results:
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(scan_results)}")
            print(f"   –¢–æ–ø-3 –ø–æ —Å–∫–æ—Ä—É:")
            for i, result in enumerate(scan_results[:3], 1):
                print(f"   {i}. {result.symbol}: {result.score:.2%}")
        else:
            print(f"   ‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –°–∏–≥–Ω–∞–ª—ã
        print(f"\n‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
        total_signals = len(getattr(self.engine.signal_manager, 'signal_history', []))
        active_signals = len(self.engine.signal_manager.active_signals)
        print(f"   –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_signals}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_signals}")
        
        if self.engine.signal_manager.active_signals:
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
            for symbol, signal in list(self.engine.signal_manager.active_signals.items())[:5]:
                print(f"   - {symbol}: {signal.side} @ ${signal.entry:,.2f}")
        
        # –ü–æ–∑–∏—Ü–∏–∏
        print(f"\nüíº –¢–æ—Ä–≥–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
        positions = self.engine.position_manager.open_positions
        closed_positions = getattr(self.engine.position_manager, 'closed_positions', [])
        
        print(f"   –û—Ç–∫—Ä—ã—Ç—ã—Ö: {len(positions)}")
        print(f"   –ó–∞–∫—Ä—ã—Ç—ã—Ö: {len(closed_positions)}")
        
        if positions:
            total_pnl = sum(p.pnl_usd for p in positions)
            print(f"   –¢–µ–∫—É—â–∏–π PnL: ${total_pnl:,.2f}")
            print(f"\n   –î–µ—Ç–∞–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π:")
            for pos in positions:
                print(f"   - {pos.symbol}: {pos.side} {pos.qty:.6f} @ ${pos.entry:,.2f}")
                print(f"     PnL: ${pos.pnl_usd:,.2f} ({pos.pnl_r:.2f}R)")
        
        if closed_positions:
            total_realized = sum(p.pnl_usd for p in closed_positions)
            print(f"\n   –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${total_realized:,.2f}")
        
        # –ò—Ç–æ–≥–∏
        print(f"\n" + "="*80)
        print("üèÅ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
        print("="*80 + "\n")
        
        if hasattr(self, 'state_history') and len(self.state_history) >= 2:
            print("‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –†–ê–ë–û–¢–ê–ï–¢ - —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏–ª–∏")
            print("   –î–≤–∏–∂–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∑")
        elif scan_results:
            print("‚ö†Ô∏è  –ü–∞–π–ø–ª–∞–π–Ω –ß–ê–°–¢–ò–ß–ù–û —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–∞–ª—å—à–µ –Ω–µ –∏–¥–µ—Ç")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤")
        else:
            print("‚ùå –ü–∞–π–ø–ª–∞–π–Ω –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å")
            print("   –î–≤–∏–∂–æ–∫ –Ω–µ –ø—Ä–æ—à–µ–ª –¥–∞–ª—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        
        print("\nüí° –≠—Ç–æ –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏:")
        print("   ‚úì –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ")
        print("   ‚úì –†–µ–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤")
        print("   ‚úì –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("   ‚úì –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π")
        print("\n")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    test = RealPipelineTest()
    await test.run_real_test()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
