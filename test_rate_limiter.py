#!/usr/bin/env python3
"""
–¢–µ—Å—Ç rate limiter –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from breakout_bot.exchange.bybit_rate_limiter import BybitRateLimiter, EndpointCategory

async def test_rate_limiter():
    """–¢–µ—Å—Ç rate limiter."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é BybitRateLimiter...")
    
    # –°–æ–∑–¥–∞—Ç—å rate limiter
    limiter = BybitRateLimiter()
    print(f"‚úÖ Rate limiter —Å–æ–∑–¥–∞–Ω: {type(limiter)}")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã
    print(f"üìä –õ–∏–º–∏—Ç—ã: {limiter.DEFAULT_LIMITS}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å wait_if_needed
    print("‚è≥ –¢–µ—Å—Ç–∏—Ä—É—é wait_if_needed...")
    await limiter.wait_if_needed(EndpointCategory.MARKET_DATA, "/v5/market/tickers")
    print("‚úÖ wait_if_needed —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    status = limiter.get_status()
    print(f"üìà –°—Ç–∞—Ç—É—Å: {status}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å execute_with_retry
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é execute_with_retry...")
    
    async def dummy_func():
        return {"test": "success"}
    
    result = await limiter.execute_with_retry(
        dummy_func,
        EndpointCategory.MARKET_DATA,
        "/v5/market/tickers"
    )
    print(f"‚úÖ execute_with_retry —Ä–∞–±–æ—Ç–∞–µ—Ç: {result}")
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_rate_limiter())
