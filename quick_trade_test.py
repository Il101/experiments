#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞
2. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
4. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime

async def check_engine_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞."""
    async with aiohttp.ClientSession() as session:
        async with session.get('http://localhost:8000/api/engine/status') as response:
            return await response.json()

async def get_scan_results():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    async with aiohttp.ClientSession() as session:
        async with session.get('http://localhost:8000/api/scanner/last') as response:
            return await response.json()

async def get_positions():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏."""
    async with aiohttp.ClientSession() as session:
        async with session.get('http://localhost:8000/api/trading/positions') as response:
            return await response.json()

async def get_engine_metrics():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–≤–∏–∂–∫–∞."""
    async with aiohttp.ClientSession() as session:
        async with session.get('http://localhost:8000/api/engine/metrics') as response:
            return await response.json()

async def monitor_trading_cycle():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª."""
    print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
    print("=" * 50)
    
    cycle_count = 0
    max_cycles = 20  # –ú–∞–∫—Å–∏–º—É–º 20 —Ü–∏–∫–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    while cycle_count < max_cycles:
        cycle_count += 1
        print(f"\nüìä –¶–∏–∫–ª {cycle_count} - {datetime.now().strftime('%H:%M:%S')}")
        
        try:
            # 1. –°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞
            status = await check_engine_status()
            print(f"üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status.get('state', 'unknown')}")
            print(f"üìà –ü–æ–∑–∏—Ü–∏–π: {status.get('openPositions', 0)}")
            print(f"üí∞ PnL: {status.get('dailyR', 0):.4f}")
            
            # 2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scan_data = await get_scan_results()
            candidates = scan_data.get('candidates', [])
            print(f"üîç –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates)}")
            
            if candidates:
                best_candidate = candidates[0]
                print(f"üèÜ –õ—É—á—à–∏–π: {best_candidate['symbol']} (score: {best_candidate['score']:.3f})")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                filters = best_candidate.get('filters', {})
                passed_filters = [k for k, v in filters.items() if v]
                failed_filters = [k for k, v in filters.items() if not v]
                print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {len(passed_filters)} —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {len(failed_filters)} —Ñ–∏–ª—å—Ç—Ä–æ–≤")
            
            # 3. –ü–æ–∑–∏—Ü–∏–∏
            positions_data = await get_positions()
            if isinstance(positions_data, list):
                positions = positions_data
            else:
                positions = positions_data.get('positions', [])
            print(f"üíº –ü–æ–∑–∏—Ü–∏–π: {len(positions)}")
            
            if positions:
                for pos in positions:
                    print(f"  üìä {pos['symbol']}: {pos['side']} {pos['qty']} @ {pos['entry']}")
                    print(f"     SL: {pos['sl']}, TP: {pos.get('tp', 'N/A')}")
                    print(f"     –°—Ç–∞—Ç—É—Å: {pos['status']}")
            
            # 4. –ú–µ—Ç—Ä–∏–∫–∏
            metrics = await get_engine_metrics()
            print(f"üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {metrics.get('totalSignals', 0)}")
            print(f"üíº –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {metrics.get('totalTrades', 0)}")
            print(f"üí∞ PnL: {metrics.get('dailyPnlR', 0):.4f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if positions:
                print("üéØ –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Ö –∑–∞–∫—Ä—ã—Ç–∏–µ...")
                # –ñ–¥–µ–º –¥–æ–ª—å—à–µ, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ
                await asyncio.sleep(30)
            else:
                # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π - –∂–¥–µ–º –º–µ–Ω—å—à–µ
                await asyncio.sleep(10)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(5)
    
    print("\nüèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω: ./start.sh")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω
    try:
        status = await check_engine_status()
        if status.get('state') == 'idle':
            print("‚ö†Ô∏è –î–≤–∏–∂–æ–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:")
            print("curl -X POST -H 'Content-Type: application/json' -d '{\"preset\": \"breakout_v1\", \"mode\": \"paper\"}' http://localhost:8000/api/engine/start")
            return
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–≤–∏–∂–∫—É: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: ./start.sh")
        return
    
    await monitor_trading_cycle()

if __name__ == "__main__":
    asyncio.run(main())
