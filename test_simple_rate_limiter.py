#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ BybitRateLimiter.
"""

import asyncio
import time
import logging
import os
import sys

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from breakout_bot.exchange.rate_limiter import BybitRateLimiter, EndpointCategory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


async def test_rate_limiter_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç rate limiter."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ BybitRateLimiter")
    
    # –°–æ–∑–¥–∞—Ç—å rate limiter
    limiter = BybitRateLimiter()
    
    # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    logger.info("‚úÖ Rate limiter —Å–æ–∑–¥–∞–Ω")
    
    # –¢–µ—Å—Ç 2: –°—Ç–∞—Ç—É—Å
    status = limiter.get_status()
    logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
    assert 'category_rates' in status
    assert 'ip_requests_5s' in status
    logger.info("‚úÖ –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    success_count = 0
    for i in range(10):
        can_request = await limiter.acquire("/v5/market/tickers", EndpointCategory.MARKET_DATA)
        if can_request:
            success_count += 1
        await asyncio.sleep(0.01)  # 10ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    logger.info(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö acquire: {success_count}/10")
    assert success_count > 0, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã—Ö acquire"
    logger.info("‚úÖ Acquire —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç 4: –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    final_status = limiter.get_status()
    logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {final_status}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    assert final_status['ip_requests_5s'] > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã IP –∑–∞–ø—Ä–æ—Å—ã"
    logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    
    return True


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        result = await test_rate_limiter_basic()
        if result:
            logger.info("üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        return result
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(main())
