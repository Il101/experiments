#!/usr/bin/env python3
"""
–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–æ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞.
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime

class BreakoutSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –ø—Ä–æ–±–æ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤."""
    
    def __init__(self):
        self.base_url = "http://localhost:8000/api"
        self.symbol = None
        self.levels = []
        self.current_price = None
    
    async def get_best_candidate(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""
        async with aiohttp.ClientSession() as session:
            async with session.get(f'{self.base_url}/scanner/last') as response:
                data = await response.json()
                candidates = data.get('candidates', [])
                
                if not candidates:
                    print("‚ùå –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
                    return None
                
                # –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å —Ö–æ—Ä–æ—à–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
                for candidate in candidates:
                    if candidate.get('levels') and len(candidate['levels']) > 0:
                        self.symbol = candidate['symbol']
                        self.levels = candidate['levels']
                        self.current_price = candidate.get('current_price', 100.0)
                        print(f"üéØ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç: {self.symbol}")
                        print(f"üìä –£—Ä–æ–≤–Ω–µ–π: {len(self.levels)}")
                        print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {self.current_price}")
                        return candidate
                
                print("‚ùå –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —É—Ä–æ–≤–Ω—è–º–∏")
                return None
    
    async def simulate_breakout(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω—è."""
        if not self.levels:
            print("‚ùå –ù–µ—Ç —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (—Å–∞–º—ã–π —Å–∏–ª—å–Ω—ã–π)
        level = self.levels[0]
        level_price = level['price']
        level_type = level['level_type']
        
        print(f"üéØ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω—è:")
        print(f"  –¢–∏–ø: {level_type}")
        print(f"  –¶–µ–Ω–∞: {level_price:.6f}")
        print(f"  –°–∏–ª–∞: {level['strength']:.3f}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫ —É—Ä–æ–≤–Ω—é –∏ –ø—Ä–æ–±–æ–π
        if level_type == 'resistance':
            # –î–ª—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è - –¥–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö —Å –ø—Ä–æ–±–æ–µ–º
            target_price = level_price * 1.005  # 0.5% –≤—ã—à–µ —É—Ä–æ–≤–Ω—è
            print(f"üìà –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ (–ø—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è): {target_price:.6f}")
        else:
            # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑ —Å –ø—Ä–æ–±–æ–µ–º
            target_price = level_price * 0.995  # 0.5% –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è
            print(f"üìâ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ (–ø—Ä–æ–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏): {target_price:.6f}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
        steps = 10
        price_step = (target_price - self.current_price) / steps
        
        print(f"üîÑ –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã...")
        for i in range(steps):
            self.current_price += price_step
            print(f"  –®–∞–≥ {i+1}/{steps}: {self.current_price:.6f}")
            await asyncio.sleep(1)
        
        print(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {self.current_price:.6f}")
    
    async def check_for_signals(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ —Å–∏–≥–Ω–∞–ª—ã."""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞
            async with session.get(f'{self.base_url}/engine/status') as response:
                status = await response.json()
                print(f"üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–∫–∞: {status.get('state')}")
                
                if status.get('state') == 'sizing':
                    print("‚úÖ –î–≤–∏–∂–æ–∫ –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SIZING - —Å–∏–≥–Ω–∞–ª—ã –Ω–∞–π–¥–µ–Ω—ã!")
                    return True
                elif status.get('state') == 'execution':
                    print("‚úÖ –î–≤–∏–∂–æ–∫ –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ EXECUTION - –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è!")
                    return True
                elif status.get('state') == 'managing':
                    print("‚úÖ –î–≤–∏–∂–æ–∫ –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MANAGING - –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã!")
                    return True
                else:
                    print("‚è≥ –î–≤–∏–∂–æ–∫ –≤—Å–µ –µ—â–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")
                    return False
    
    async def run_simulation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é."""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ–±–æ—è")
        print("=" * 50)
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        candidate = await self.get_best_candidate()
        if not candidate:
            return
        
        # 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–±–æ–π
        await self.simulate_breakout()
        
        # 3. –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
        print("\n‚è≥ –ñ–¥–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        for i in range(10):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 10 —Ä–∞–∑
            print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞ {i+1}/10...")
            if await self.check_for_signals():
                break
            await asyncio.sleep(5)
        
        print("\nüèÅ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    simulator = BreakoutSimulator()
    await simulator.run_simulation()

if __name__ == "__main__":
    asyncio.run(main())
