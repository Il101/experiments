#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

from breakout_bot.config.settings import load_preset, SystemConfig
from breakout_bot.exchange.exchange_client import ExchangeClient, MarketDataProvider
from breakout_bot.scanner.market_scanner import BreakoutScanner
from breakout_bot.signals.signal_generator import SignalGenerator
from breakout_bot.data.models import MarketData

# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

async def debug_signal_generation():
    """–û—Ç–ª–∞–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤."""
    try:
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Å–µ—Ç
        preset = load_preset("breakout_v1_ultra_relaxed")
        
        # –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã
        config = SystemConfig(
            exchange="bybit",
            paper_mode=True,
            paper_starting_balance=10000,
            paper_slippage_bps=5
        )
        exchange_client = ExchangeClient(config)
        market_data_provider = MarketDataProvider(exchange_client, enable_websocket=False)
        scanner = BreakoutScanner(preset)
        signal_generator = SignalGenerator(preset)
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å–∏–º–≤–æ–ª—ã
        test_symbols = ['BTC/USDT:USDT', 'ETH/USDT:USDT', 'SOL/USDT:USDT']
        
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤:")
        
        for symbol in test_symbols:
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {symbol}:")
            
            try:
                # –ü–æ–ª—É—á–∏—Ç—å market data
                market_data = await market_data_provider.get_market_data(symbol)
                if not market_data:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å market data –¥–ª—è {symbol}")
                    continue
                
                print(f"  üìà Market Data –ø–æ–ª—É—á–µ–Ω:")
                print(f"    - –¶–µ–Ω–∞: ${market_data.price:,.2f}")
                print(f"    - –û–±—ä–µ–º 24h: ${market_data.volume_24h_usd:,.0f}")
                print(f"    - OI: ${market_data.oi_usd:,.0f}")
                print(f"    - Trades/min: {market_data.trades_per_minute:.1f}")
                print(f"    - ATR 15m: {market_data.atr_15m:.6f}")
                print(f"    - –°–≤–µ—á–∏ 5m: {len(market_data.candles_5m) if market_data.candles_5m else 0}")
                print(f"    - L2 Depth: {'‚úÖ' if market_data.l2_depth else '‚ùå'}")
                
                # –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫
                scan_result = await scanner._scan_single_market(market_data)
                if not scan_result:
                    print(f"  ‚ùå –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –≤–µ—Ä–Ω—É–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    continue
                
                print(f"  üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
                print(f"    - –ü—Ä–æ—à–µ–ª –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã: {'‚úÖ' if scan_result.passed_all_filters else '‚ùå'}")
                print(f"    - –°—á–µ—Ç: {scan_result.score:.3f}")
                print(f"    - –£—Ä–æ–≤–Ω–∏: {len(scan_result.levels) if scan_result.levels else 0}")
                
                if scan_result.levels:
                    for i, level in enumerate(scan_result.levels):
                        print(f"      Level {i+1}: {level.level_type} @ ${level.price:.2f} (strength: {level.strength:.3f})")
                
                # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª
                signal = await signal_generator.generate_signal(scan_result)
                
                if signal:
                    print(f"  ‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
                    print(f"    - –¢–∏–ø: {signal.strategy}")
                    print(f"    - –°—Ç–æ—Ä–æ–Ω–∞: {signal.side}")
                    print(f"    - –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal.entry:.2f}")
                    print(f"    - –°—Ç–æ–ø –ª–æ—Å—Å: ${signal.sl:.2f}")
                    print(f"    - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f}")
                else:
                    print(f"  ‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    if not scan_result.passed_all_filters:
                        failed_filters = [name for name, passed in scan_result.filter_results.items() if not passed]
                        print(f"    üí• –ù–µ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã: {failed_filters}")
                    
                    if not scan_result.levels:
                        print(f"    üí• –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π")
                    
                    if not market_data.candles_5m or len(market_data.candles_5m) < 20:
                        print(f"    üí• –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π: {len(market_data.candles_5m) if market_data.candles_5m else 0} < 20")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")
                import traceback
                traceback.print_exc()
        
        await exchange_client.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–∞–¥–∫–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(debug_signal_generation())
