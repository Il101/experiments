#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤.
"""

import asyncio
import json
import logging
from datetime import datetime
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from breakout_bot.config.settings import load_preset
from breakout_bot.core.engine import OptimizedOrchestraEngine
from breakout_bot.config.settings import SystemConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_relaxed_preset():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π –ø—Ä–µ—Å–µ—Ç."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–°–õ–ê–ë–õ–ï–ù–ù–û–ì–û –ü–†–ï–°–ï–¢–ê")
    print("=" * 50)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π –ø—Ä–µ—Å–µ—Ç
        preset = load_preset("breakout_v1_relaxed")
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–µ—Å–µ—Ç: {preset.name}")
        print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {preset.description}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
        config = SystemConfig(
            trading_mode="paper",
            paper_mode=True,
            preset_name="breakout_v1_relaxed"
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
        engine = OptimizedOrchestraEngine(config)
        print("‚úÖ –î–≤–∏–∂–æ–∫ —Å–æ–∑–¥–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        await engine.initialize()
        print("‚úÖ –î–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        await engine._scan_markets()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if hasattr(engine, 'scanner') and hasattr(engine.scanner, 'last_scan_results'):
            results = engine.scanner.last_scan_results
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(results)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if results:
                print("\nüèÜ –¢–û–ü-5 –ö–ê–ù–î–ò–î–ê–¢–û–í:")
                for i, result in enumerate(results[:5], 1):
                    print(f"  {i}. {result.symbol}: –æ—Ü–µ–Ω–∫–∞ {result.score:.2f}")
                    if hasattr(result, 'filter_results'):
                        passed = sum(1 for r in result.filter_results.values() if r.passed)
                        total = len(result.filter_results)
                        print(f"     –§–∏–ª—å—Ç—Ä—ã: {passed}/{total} –ø—Ä–æ–π–¥–µ–Ω–æ")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            print("\n‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤...")
            if hasattr(engine, 'signal_generator'):
                signals = engine.signal_generator.generate_signals(results)
                print(f"üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
                
                if signals:
                    print("\nüìà –°–ò–ì–ù–ê–õ–´:")
                    for i, signal in enumerate(signals[:3], 1):
                        print(f"  {i}. {signal.symbol}: {signal.strategy} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f})")
                        print(f"     –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal.direction}, –£—Ä–æ–≤–µ–Ω—å: {signal.level_price:.4f}")
        else:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    success = await test_relaxed_preset()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    asyncio.run(main())

