#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Å—å —Ü–∏–∫–ª: SCANNING ‚Üí LEVEL_BUILDING ‚Üí SIGNAL_WAIT ‚Üí SIZING ‚Üí EXECUTION ‚Üí MANAGING ‚Üí CLOSED
"""

import asyncio
import sys
import time
from pathlib import Path
from typing import List, Optional
from decimal import Decimal

sys.path.insert(0, str(Path(__file__).parent))

from breakout_bot.core.engine import OptimizedOrchestraEngine
from breakout_bot.core.state_machine import TradingState
from breakout_bot.data.models import (
    ScanResult, TradingLevel, Signal, Position, MarketData, Candle, L2Depth
)


class FullPipelineSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –ø–æ–ª–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏."""
    
    def __init__(self, preset_name: str = "breakout_v1"):
        self.preset_name = preset_name
        self.engine = None
        self.test_symbol = "BTC/USDT:USDT"
        self.test_results = {
            'scanning': False,
            'level_building': False,
            'signal_generation': False,
            'sizing': False,
            'execution': False,
            'managing': False,
            'position_closed': False
        }
        
    async def run_full_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞."""
        print("\n" + "="*80)
        print("üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –¢–û–†–ì–û–í–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê")
        print("="*80 + "\n")
        
        try:
            # –§–∞–∑–∞ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self._phase_1_initialization()
            
            # –§–∞–∑–∞ 2: –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            market_data = await self._phase_2_create_favorable_conditions()
            
            # –§–∞–∑–∞ 3: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏–Ω–∂–µ–∫—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
            scan_result = await self._phase_3_scanning(market_data)
            
            # –§–∞–∑–∞ 4: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
            await self._phase_4_level_building(scan_result)
            
            # –§–∞–∑–∞ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
            signal = await self._phase_5_signal_generation(scan_result)
            
            # –§–∞–∑–∞ 6: –†–∞–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            sized_signal = await self._phase_6_sizing(signal, market_data)
            
            # –§–∞–∑–∞ 7: –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            position = await self._phase_7_execution(sized_signal)
            
            # –§–∞–∑–∞ 8: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π
            await self._phase_8_managing(position)
            
            # –§–∞–∑–∞ 9: –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            await self._phase_9_closing(position)
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self._print_final_report()
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
                
    async def _phase_1_initialization(self):
        """–§–∞–∑–∞ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)."""
        print("\n" + "="*80)
        print("üì¶ –§–ê–ó–ê 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø (–°–ò–ú–£–õ–Ø–¶–ò–Ø)")
        print("="*80 + "\n")
        
        print("‚ö†Ô∏è  –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏")
        print("   –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ")
        print("   –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞\n")
        
        print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"   –ü—Ä–µ—Å–µ—Ç: {self.preset_name}")
        print(f"   –†–µ–∂–∏–º: –ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è")
        print(f"   –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–º–≤–æ–ª: {self.test_symbol}")
            
    async def _phase_2_create_favorable_conditions(self) -> MarketData:
        """–§–∞–∑–∞ 2: –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π."""
        print("\n" + "="*80)
        print("üé≤ –§–ê–ó–ê 2: –°–û–ó–î–ê–ù–ò–ï –ë–õ–ê–ì–û–ü–†–ò–Ø–¢–ù–´–• –£–°–õ–û–í–ò–ô")
        print("="*80 + "\n")
        
        print("–°–æ–∑–¥–∞–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞...")
        
        # –°–æ–∑–¥–∞—Ç—å —Å–≤–µ—á–∏ —Å —è–≤–Ω—ã–º –ø—Ä–æ–±–æ–µ–º
        current_time = int(time.time() * 1000)
        base_price = 45000.0
        
        candles = []
        
        # –ë–∞–∑–æ–≤—ã–µ —Å–≤–µ—á–∏ (–±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
        for i in range(100):
            candles.append(Candle(
                ts=current_time - (100 - i) * 300000,  # 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
                open=base_price + (i % 10 - 5) * 10,
                high=base_price + (i % 10 - 5) * 10 + 50,
                low=base_price + (i % 10 - 5) * 10 - 50,
                close=base_price + (i % 10 - 5) * 10,
                volume=1000000.0 + (i % 20) * 50000
            ))
        
        # –ü—Ä–æ–±–æ–π–Ω—ã–µ —Å–≤–µ—á–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –æ–±—ä–µ–º–æ–º
        resistance_level = base_price + 200
        
        # –ü–æ–¥—Ö–æ–¥ –∫ —É—Ä–æ–≤–Ω—é
        for i in range(5):
            candles.append(Candle(
                ts=current_time - (5 - i) * 300000,
                open=resistance_level - 100 + i * 20,
                high=resistance_level - 80 + i * 20,
                low=resistance_level - 120 + i * 20,
                close=resistance_level - 80 + i * 20,
                volume=1200000.0 + i * 100000
            ))
        
        # –ü–†–û–ë–û–ô —Å —Å–∏–ª—å–Ω—ã–º –æ–±—ä–µ–º–æ–º
        candles.append(Candle(
            ts=current_time - 300000,
            open=resistance_level - 20,
            high=resistance_level + 150,  # –°–∏–ª—å–Ω—ã–π –ø—Ä–æ–±–æ–π
            low=resistance_level - 30,
            close=resistance_level + 100,  # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è
            volume=3000000.0  # –û–±—ä–µ–º –≤ 2.5 —Ä–∞–∑–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
        ))
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Å–≤–µ—á–∞
        candles.append(Candle(
            ts=current_time,
            open=resistance_level + 100,
            high=resistance_level + 130,
            low=resistance_level + 80,
            close=resistance_level + 110,
            volume=2500000.0  # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        ))
        
        # –°–æ–∑–¥–∞—Ç—å L2 depth —Å —Ö–æ—Ä–æ—à–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é
        # –ü–æ–¥—Å—á–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ USD
        bid_liquidity_0_5pct = 100000.0  # $100k
        ask_liquidity_0_5pct = 95000.0
        bid_liquidity_0_3pct = 60000.0
        ask_liquidity_0_3pct = 55000.0
        spread = 10.0  # $10
        spread_bps = (spread / (resistance_level + 110)) * 10000  # –≤ –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö
        
        l2_depth = L2Depth(
            bid_usd_0_5pct=bid_liquidity_0_5pct,
            ask_usd_0_5pct=ask_liquidity_0_5pct,
            bid_usd_0_3pct=bid_liquidity_0_3pct,
            ask_usd_0_3pct=ask_liquidity_0_3pct,
            spread_bps=spread_bps,
            imbalance=0.025  # –ù–µ–±–æ–ª—å—à–æ–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –≤ –ø–æ–ª—å–∑—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
        )
        
        market_data = MarketData(
            symbol=self.test_symbol,
            price=resistance_level + 110,
            volume_24h_usd=50000000.0,
            oi_usd=100000000.0,
            oi_change_24h=2.5,  # 2.5% —Ä–æ—Å—Ç OI
            trades_per_minute=45.0,
            atr_5m=120.0,
            atr_15m=180.0,
            bb_width_pct=2.5,
            btc_correlation=0.75,
            l2_depth=l2_depth,
            candles_5m=candles,
            timestamp=current_time,
            market_type="futures"
        )
        
        print(f"‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã:")
        print(f"   –°–∏–º–≤–æ–ª: {self.test_symbol}")
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${market_data.price:,.2f}")
        print(f"   –£—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: ${resistance_level:,.2f}")
        print(f"   –ü—Ä–æ–±–æ–π –Ω–∞: ${resistance_level + 150:,.2f} (–≤—ã—Å—à–∏–π)")
        print(f"   –û–±—ä–µ–º –ø—Ä–æ–±–æ—è: {3000000.0:,.0f} (250% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)")
        print(f"   –°–≤–µ—á–µ–π: {len(candles)}")
        print(f"   24h –û–±—ä–µ–º: ${market_data.volume_24h_usd:,.0f}")
        print(f"   OI: ${market_data.oi_usd:,.0f}")
        print(f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (0.5%): ${l2_depth.total_depth_usd_0_5pct:,.0f}")
        
        return market_data
        
    async def _phase_3_scanning(self, market_data: MarketData) -> ScanResult:
        """–§–∞–∑–∞ 3: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏–Ω–∂–µ–∫—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö."""
        print("\n" + "="*80)
        print("üîç –§–ê–ó–ê 3: –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –†–´–ù–ö–ê")
        print("="*80 + "\n")
        
        print("–°–æ–∑–¥–∞–Ω–∏–µ ScanResult —Å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏...")
        
        # –°–æ–∑–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        resistance_level = 45200.0
        current_ts = int(time.time() * 1000)
        
        level = TradingLevel(
            price=resistance_level,
            level_type="resistance",
            touch_count=5,  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Å–∞–Ω–∏—è
            strength=0.85,  # –°–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            first_touch_ts=current_ts - 86400000,  # 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            last_touch_ts=current_ts - 3600000,  # 1 —á–∞—Å –Ω–∞–∑–∞–¥
            base_height=100.0
        )
        
        scan_result = ScanResult(
            symbol=self.test_symbol,
            score=0.89,  # –í—ã—Å–æ–∫–∏–π –±–∞–ª–ª
            rank=1,
            market_data=market_data,
            filter_results={
                'min_24h_volume': True,
                'min_oi': True,
                'min_depth_0_5pct': True,
                'min_depth_0_3pct': True,
                'min_trades_per_minute': True,
                'atr_range': True,
                'volume_surge_1h': True,
                'volume_surge_5m': True
            },
            filter_details={},
            score_components={
                'liquidity_score': 0.95,
                'volatility_score': 0.82,
                'momentum_score': 0.88,
                'volume_score': 0.92
            },
            levels=[level],
            timestamp=current_ts,
            correlation_id=f"test_{current_ts}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ scanning_manager (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ)
        # self.engine.scanning_manager.last_scan_results = [scan_result]
        
        print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        print(f"   –°–∏–º–≤–æ–ª: {scan_result.symbol}")
        print(f"   –û–±—â–∏–π –±–∞–ª–ª: {scan_result.score:.2%}")
        print(f"   –£—Ä–æ–≤–Ω–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(scan_result.levels)}")
        print(f"   –£—Ä–æ–≤–µ–Ω—å: ${level.price:,.2f} ({level.level_type})")
        print(f"   –°–∏–ª–∞ —É—Ä–æ–≤–Ω—è: {level.strength:.2%}")
        print(f"   –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã: ‚úÖ")
        
        self.test_results['scanning'] = True
        return scan_result
        
    async def _phase_4_level_building(self, scan_result: ScanResult):
        """–§–∞–∑–∞ 4: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π."""
        print("\n" + "="*80)
        print("üìê –§–ê–ó–ê 4: –ü–û–°–¢–†–û–ï–ù–ò–ï –£–†–û–í–ù–ï–ô")
        print("="*80 + "\n")
        
        # –£—Ä–æ–≤–Ω–∏ —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Å–∫–∞–Ω–µ—Ä–µ
        print("‚úÖ –£—Ä–æ–≤–Ω–∏ —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π: {len(scan_result.levels)}")
        
        for i, level in enumerate(scan_result.levels, 1):
            print(f"\n   –£—Ä–æ–≤–µ–Ω—å {i}:")
            print(f"      –¶–µ–Ω–∞: ${level.price:,.2f}")
            print(f"      –¢–∏–ø: {level.level_type}")
            print(f"      –°–∏–ª–∞: {level.strength:.2%}")
            print(f"      –ö–∞—Å–∞–Ω–∏–π: {level.touch_count}")
        
        self.test_results['level_building'] = True
        
    async def _phase_5_signal_generation(self, scan_result: ScanResult) -> Signal:
        """–§–∞–∑–∞ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."""
        print("\n" + "="*80)
        print("‚ö° –§–ê–ó–ê 5: –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–û–†–ì–û–í–û–ì–û –°–ò–ì–ù–ê–õ–ê")
        print("="*80 + "\n")
        
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ scan result...")
        
        # –°–æ–∑–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª –≤—Ä—É—á–Ω—É—é –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        level = scan_result.levels[0]
        current_price = scan_result.market_data.price
        
        # Momentum breakout - —Ü–µ–Ω–∞ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        side = "long"
        entry_price = current_price
        
        # Stop loss –ø–æ–¥ —É—Ä–æ–≤–Ω–µ–º –ø—Ä–æ–±–æ—è
        stop_loss = level.price - 50  # $50 –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è
        
        # Take profit –Ω–∞ –æ—Å–Ω–æ–≤–µ R:R 2:1
        risk = abs(entry_price - stop_loss)
        take_profit = entry_price + (risk * 2)
        
        signal = Signal(
            symbol=self.test_symbol,
            side=side,
            strategy="momentum",
            reason=f"Strong momentum breakout above {level.level_type} at ${level.price:,.2f}",
            entry=entry_price,
            level=level.price,
            sl=stop_loss,
            confidence=0.82,  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            timestamp=int(time.time() * 1000),
            status="pending",
            correlation_id=scan_result.correlation_id,
            tp1=take_profit,
            tp2=take_profit + risk,  # –í—Ç–æ—Ä–∞—è —Ü–µ–ª—å –µ—â–µ –¥–∞–ª—å—à–µ
            meta={
                'level_id': f"{level.level_type}_{level.price}",
                'timeframe': '5m',
                'risk_amount': risk
            }
        )
        
        # –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ signal_manager
        # await self.engine.signal_manager._add_active_signal(signal)
        # self.engine.signal_manager.signal_market_data[signal.symbol] = scan_result.market_data
        
        print(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        print(f"   –°–∏–º–≤–æ–ª: {signal.symbol}")
        print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal.side.upper()}")
        print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal.strategy}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2%}")
        print(f"\n   –¶–µ–Ω—ã:")
        print(f"      Entry: ${signal.entry:,.2f}")
        print(f"      Stop Loss: ${signal.sl:,.2f}")
        print(f"      Take Profit 1: ${signal.tp1:,.2f}")
        print(f"      Take Profit 2: ${signal.tp2:,.2f}")
        print(f"      Risk: ${risk:,.2f}")
        print(f"      Reward: ${risk * 2:,.2f}")
        print(f"      R:R: 1:2")
        print(f"\n   –ü—Ä–∏—á–∏–Ω–∞: {signal.reason}")
        
        self.test_results['signal_generation'] = True
        return signal
        
    async def _phase_6_sizing(self, signal: Signal, market_data: MarketData) -> Signal:
        """–§–∞–∑–∞ 6: –†–∞–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤)."""
        print("\n" + "="*80)
        print("üí∞ –§–ê–ó–ê 6: –†–ê–ó–ú–ï–†–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò")
        print("="*80 + "\n")
        
        print("–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏...")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞
        equity = 10000.0  # $10k –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
        risk_per_trade = 0.01  # 1% —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É
        max_leverage = 5
        
        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        risk_amount = equity * risk_per_trade  # $100
        price_risk = abs(signal.entry - signal.sl)  # —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–µ
        position_size = risk_amount / price_risk  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        position_value = position_size * signal.entry
        
        risk_evaluation = {
            'approved': True,
            'position_size': position_size,
            'position_value': position_value,
            'risk_amount': risk_amount,
            'leverage': max_leverage
        }
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤:")
        print(f"   –û–¥–æ–±—Ä–µ–Ω–æ: ‚úÖ")
        print(f"   –ö–∞–ø–∏—Ç–∞–ª: ${equity:,.2f}")
        print(f"   –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {risk_per_trade:.2%}")
        
        print(f"\n   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:")
        print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {risk_evaluation.get('position_size', 0):.6f} {signal.symbol.split('/')[0]}")
        print(f"      –°—Ç–æ–∏–º–æ—Å—Ç—å: ${risk_evaluation.get('position_value', 0):,.2f}")
        print(f"      –†–∏—Å–∫: ${risk_evaluation.get('risk_amount', 0):,.2f}")
        print(f"      –ü–ª–µ—á–æ: {risk_evaluation.get('leverage', 1):.1f}x")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤ meta
        signal.meta['position_size'] = risk_evaluation.get('position_size', 0)
        signal.meta['position_value'] = risk_evaluation.get('position_value', 0)
        
        self.test_results['sizing'] = True
        
        return signal
        
    async def _phase_7_execution(self, signal: Signal) -> Position:
        """–§–∞–∑–∞ 7: –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞."""
        print("\n" + "="*80)
        print("üéØ –§–ê–ó–ê 7: –ò–°–ü–û–õ–ù–ï–ù–ò–ï –û–†–î–ï–†–ê")
        print("="*80 + "\n")
        
        print("–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ...")
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size = signal.meta.get('position_size', 0.001)
        
        # –°–æ–∑–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é (—Å–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è)
        position = Position(
            id=f"pos_{int(time.time())}",
            symbol=signal.symbol,
            side=signal.side,
            strategy=signal.strategy,
            qty=position_size,
            entry=signal.entry,
            sl=signal.sl,
            tp=signal.tp1,  # –ü–µ—Ä–≤–∞—è —Ü–µ–ª—å
            status='open',
            pnl_usd=0.0,
            pnl_r=0.0,
            fees_usd=0.0,
            timestamps={
                'created_at': int(time.time() * 1000),
                'opened_at': int(time.time() * 1000)
            },
            meta={
                'confidence': signal.confidence,
                'correlation_id': signal.correlation_id,
                'level_price': signal.level,
                'tp2': signal.tp2
            }
        )
        
        # –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ –æ–Ω–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ position_manager
        # await self.engine.position_manager.add_position(position)
        
        print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞:")
        print(f"   ID: {position.id}")
        print(f"   –°–∏–º–≤–æ–ª: {position.symbol}")
        print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {position.side.upper()}")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${position.entry:,.2f}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {position.qty:.6f}")
        print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: ${position.entry * position.qty:,.2f}")
        print(f"\n   –£—Ä–æ–≤–Ω–∏:")
        print(f"      Stop Loss: ${position.sl:,.2f}")
        print(f"      Take Profit: ${position.tp:,.2f}")
        
        self.test_results['execution'] = True
        return position
        
    async def _phase_8_managing(self, position: Position):
        """–§–∞–∑–∞ 8: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π."""
        print("\n" + "="*80)
        print("üìà –§–ê–ó–ê 8: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ï–ô")
        print("="*80 + "\n")
        
        print("–°–∏–º—É–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π...")
        
        # –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω—ã
        price_updates = [
            (position.entry + 20, "–¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç +$20"),
            (position.entry + 50, "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ +$50"),
            (position.entry + 80, "–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ TP +$80"),
        ]
        
        current_price = position.entry
        pnl_percent = 0.0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        
        for i, (new_price, description) in enumerate(price_updates, 1):
            print(f"\n   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {i}: {description}")
            
            # –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = new_price
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å PnL
            if position.side == "long":
                position.pnl_usd = (new_price - position.entry) * position.qty
            else:
                position.pnl_usd = (position.entry - new_price) * position.qty
            
            position_value = position.entry * position.qty
            pnl_percent = (position.pnl_usd / position_value) * 100 if position_value > 0 else 0
            
            print(f"      –¶–µ–Ω–∞: ${new_price:,.2f}")
            print(f"      PnL: ${position.pnl_usd:,.2f} ({pnl_percent:+.2f}%)")
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å trailing stop, break-even –∏ —Ç.–¥.
            if pnl_percent > 1.0:
                print(f"      ‚úÖ –ü—Ä–∏–±—ã–ª—å > 1% - –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å trailing stop")
            
            await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        
        print(f"\n‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        print(f"   –¢–µ–∫—É—â–∞—è PnL: ${position.pnl_usd:,.2f} ({pnl_percent:+.2f}%)")
        
        self.test_results['managing'] = True
        
    async def _phase_9_closing(self, position: Position):
        """–§–∞–∑–∞ 9: –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏."""
        print("\n" + "="*80)
        print("üèÅ –§–ê–ó–ê 9: –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò")
        print("="*80 + "\n")
        
        print("–°–∏–º—É–ª—è—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Take Profit –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏...")
        
        # –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç TP (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
        final_price = position.tp if position.tp is not None else position.entry + 100
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π PnL
        if position.side == "long":
            position.pnl_usd = (final_price - position.entry) * position.qty
        else:
            position.pnl_usd = (position.entry - final_price) * position.qty
        
        position_value = position.entry * position.qty
        final_pnl_percent = (position.pnl_usd / position_value) * 100 if position_value > 0 else 0
        
        # –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
        position.status = 'closed'
        position.timestamps['closed_at'] = int(time.time() * 1000)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        # await self.engine.position_manager.update_position(position)
        
        print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ Take Profit!")
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –°–∏–º–≤–æ–ª: {position.symbol}")
        print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {position.side.upper()}")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${position.entry:,.2f}")
        print(f"   –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${final_price:,.2f}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${final_price - position.entry:,.2f}")
        print(f"\n   üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"      PnL: ${position.pnl_usd:,.2f}")
        print(f"      PnL %: {final_pnl_percent:+.2f}%")
        print(f"      R:R —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: ~2:1")
        
        # –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        hold_time = position.timestamps['closed_at'] - position.timestamps['opened_at']
        hold_seconds = hold_time / 1000
        print(f"\n   ‚è±Ô∏è  –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {hold_seconds:.1f}s (–≤ —Ç–µ—Å—Ç–µ)")
        
        self.test_results['position_closed'] = True
        
    def _print_final_report(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç."""
        print("\n\n" + "="*80)
        print("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ - –ü–û–õ–ù–´–ô –¶–ò–ö–õ –¢–û–†–ì–û–í–õ–ò")
        print("="*80 + "\n")
        
        phases = [
            ('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 'scanning'),
            ('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π', 'level_building'),
            ('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤', 'signal_generation'),
            ('–†–∞–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', 'sizing'),
            ('–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞', 'execution'),
            ('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π', 'managing'),
            ('–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏', 'position_closed')
        ]
        
        all_passed = True
        
        print("–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ñ–∞–∑:")
        for phase_name, phase_key in phases:
            status = "‚úÖ" if self.test_results[phase_key] else "‚ùå"
            print(f"  {status} {phase_name}")
            if not self.test_results[phase_key]:
                all_passed = False
        
        print("\n" + "="*80)
        if all_passed:
            print("‚úÖ –£–°–ü–ï–•! –í–µ—Å—å —Ç–æ—Ä–≥–æ–≤—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("   –í—Å–µ —Ñ–∞–∑—ã –æ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.")
            print("\nüöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–∑—ã –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        print("="*80 + "\n")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    simulator = FullPipelineSimulator()
    await simulator.run_full_test()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
