#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å –§–û–†–°–ò–†–û–í–ê–ù–ù–´–ú —Å–∏–≥–Ω–∞–ª–æ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ü–æ–¥—Ö–æ–¥:
1. –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Bybit
2. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
3. –§–û–†–°–ò–†–£–ï–ú —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
4. –ù–∞–±–ª—é–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: SIZING ‚Üí EXECUTION ‚Üí MANAGING ‚Üí –∑–∞–∫—Ä—ã—Ç–∏–µ

–≠—Ç–æ –¥–∞—Å—Ç –Ω–∞–º:
- ‚úÖ –†–µ–∞–ª—å–Ω–æ–µ API –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
- ‚úÖ –†–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
- ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
- ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—é execution/management –ª–æ–≥–∏–∫–∏
"""

import asyncio
import sys
import time
from pathlib import Path
from datetime import datetime, timezone
from decimal import Decimal

sys.path.insert(0, str(Path(__file__).parent))

from breakout_bot.core.engine import OptimizedOrchestraEngine
from breakout_bot.core.state_machine import TradingState
from breakout_bot.data.models import Signal


class ForcedSignalTest:
    """–¢–µ—Å—Ç —Å —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∏–≥–Ω–∞–ª–æ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.engine = None
        self.test_duration = 180  # 180 —Å–µ–∫—É–Ω–¥ (3 –º–∏–Ω—É—Ç—ã) –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.forced_signal = None
        self.start_time = None
        self.state_history = []
        
    async def setup_engine(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        print("\n" + "="*80)
        print("üéØ FORCED SIGNAL TEST - Full Trading Cycle on Real Data")
        print("="*80)
        print()
        print("üìã –ü–ª–∞–Ω —Ç–µ—Å—Ç–∞:")
        print("   1. –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ OptimizedOrchestraEngine")
        print("   2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit (paper trading mode)")
        print("   3. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
        print("   4. –§–û–†–°–ò–†–û–í–ê–ù–ò–ï —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ª—É—á—à–µ–º –∞–∫—Ç–∏–≤–µ")
        print("   5. –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:")
        print("      SIGNAL_WAIT ‚Üí SIZING ‚Üí EXECUTION ‚Üí MANAGING ‚Üí –∑–∞–∫—Ä—ã—Ç–∏–µ")
        print("   6. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3 –º–∏–Ω—É—Ç—ã")
        print()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
        print("‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞...")
        self.engine = OptimizedOrchestraEngine(preset_name="breakout_v1_working")
        
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        await self.engine.initialize()
        
        print("‚úÖ –î–≤–∏–∂–æ–∫ –≥–æ—Ç–æ–≤!")
        print(f"   Mode: {'Paper' if getattr(self.engine.exchange_client, 'paper_mode', True) else 'Live'}")
        print(f"   Capital: ${self.engine.starting_equity:,.2f}")
        print()
        
    async def wait_for_scanning_complete(self):
        """–ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        while True:
            await asyncio.sleep(1)
            
            current_state = self.engine.state_machine.current_state
            
            if current_state == TradingState.SIGNAL_WAIT:
                print("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –¥–≤–∏–∂–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ SIGNAL_WAIT")
                break
            elif current_state in [TradingState.ERROR, TradingState.STOPPED]:
                raise Exception(f"–î–≤–∏–∂–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
                
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é
        await asyncio.sleep(2)
        
    async def create_forced_signal(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ª—É—á—à–µ–º –∞–∫—Ç–∏–≤–µ"""
        print("\n" + "="*80)
        print("üéØ –°–û–ó–î–ê–ù–ò–ï –§–û–†–°–ò–†–û–í–ê–ù–ù–û–ì–û –°–ò–ì–ù–ê–õ–ê")
        print("="*80)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ scanning_manager
        scan_results = []
        if hasattr(self.engine, 'scanning_manager'):
            sm = self.engine.scanning_manager
            if hasattr(sm, 'last_scan_results') and sm.last_scan_results:
                scan_results = sm.last_scan_results
                
        if not scan_results:
            raise Exception(f"–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø—É—Å—Ç. ScanningManager: {self.engine.scanning_manager if hasattr(self.engine, 'scanning_manager') else 'N/A'}")
            
        print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(scan_results)}")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É)
        best_candidate = max(scan_results, key=lambda x: x.market_data.volume_24h_usd)
        symbol = best_candidate.symbol
        
        print(f"\nüéØ –í—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤: {symbol}")
        print(f"   24h Volume: ${best_candidate.market_data.volume_24h_usd:,.0f}")
        print(f"   Price: ${best_candidate.market_data.price}")
        print(f"   ATR 5m: {best_candidate.market_data.atr_5m}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å –±–∏—Ä–∂–∏
        try:
            ticker = await self.engine.exchange_client.fetch_ticker(symbol)
            current_price = Decimal(str(ticker['last']))
            print(f"   Current Price (live): ${current_price}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å live —Ü–µ–Ω—É: {e}")
            current_price = Decimal(str(best_candidate.market_data.price))
            
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ–ø –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        stop_loss = current_price * Decimal('0.98')  # -2%
        take_profit = current_price * Decimal('1.04')  # +4%
        
        self.forced_signal = Signal(
            symbol=symbol,
            side='long',  # Long –ø–æ–∑–∏—Ü–∏—è
            strategy='momentum',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º momentum —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            reason=f"FORCED TEST SIGNAL - Best scanned candidate with volume ${best_candidate.market_data.volume_24h_usd:,.0f}",
            entry=float(current_price),
            level=float(current_price),  # Level —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å entry
            sl=float(stop_loss),
            confidence=0.80,
            timestamp=int(datetime.now(timezone.utc).timestamp() * 1000),
            status="pending",
            correlation_id=f"forced_test_{int(datetime.now().timestamp())}",
            tp1=float(take_profit),
            tp2=float(take_profit * Decimal('1.02')),  # TP2 –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ
            meta={
                'test_type': 'forced_signal',
                'scan_result': {
                    'volume_24h': best_candidate.market_data.volume_24h_usd,
                    'atr_5m': best_candidate.market_data.atr_5m,
                    'forced': True,
                }
            }
        )
        
        print(f"\n‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω:")
        print(f"   Type: {self.forced_signal.strategy} {self.forced_signal.side}")
        print(f"   Entry: ${self.forced_signal.entry:.6f}")
        print(f"   Stop Loss: ${self.forced_signal.sl:.6f} (-2.00%)")
        print(f"   Take Profit: ${self.forced_signal.tp1:.6f} (+4.00%)")
        print(f"   Risk/Reward: 1:2")
        print(f"   Confidence: {self.forced_signal.confidence:.1%}")
        print()
        
    async def inject_signal(self):
        """Inject forced signal into engine."""
        if not self.forced_signal:
            raise Exception("–°–∏–≥–Ω–∞–ª –Ω–µ —Å–æ–∑–¥–∞–Ω!")
        
        signal = self.forced_signal
        
        print("\nüíâ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –¥–≤–∏–∂–æ–∫...")
        
        # –ù–∞–π—Ç–∏ market_data –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ scan_results
        scan_results = self.engine.scanning_manager.last_scan_results
        market_data = None
        for sr in scan_results:
            if sr.symbol == signal.symbol:
                market_data = sr.market_data
                break
        
        if not market_data:
            raise Exception(f"–ù–µ –Ω–∞–π–¥–µ–Ω market_data –¥–ª—è {signal.symbol}")
        
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º market_data –≤ signal_manager
        self.engine.signal_manager.signal_market_data[signal.symbol] = market_data
        print(f"‚úÖ Market data –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {signal.symbol}")
        
        # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        await self.engine.signal_manager._add_active_signal(signal)
        
        print(f"‚úÖ –°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ active_signals")
        print(f"   –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(self.engine.signal_manager.active_signals)}")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –¥–≤–∏–∂–æ–∫ –≤ SIZING, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª
        print("\n‚ö° –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–≤–∏–∂–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SIZING...")
        await self.engine.state_machine.transition_to(
            TradingState.SIZING,
            "Forced signal injected - moving to sizing"
        )
        print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {self.engine.state_machine.current_state}")
        print()
        
    async def monitor_trading_cycle(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        print("="*80)
        print("üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –¢–û–†–ì–û–í–û–ì–û –¶–ò–ö–õ–ê")
        print("="*80)
        print()
        
        prev_state = self.engine.state_machine.current_state
        position_opened = False
        position_id = None
        last_pnl_time = time.time()
        
        start_time = datetime.now()
        
        while True:
            await asyncio.sleep(0.5)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
            elapsed = (datetime.now() - start_time).total_seconds()
            if elapsed > self.test_duration:
                print(f"\n‚è∞ –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∞ ({self.test_duration}—Å)")
                break
                
            current_state = self.engine.state_machine.current_state
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if current_state != prev_state:
                timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
                self.state_history.append({
                    'timestamp': timestamp,
                    'from': prev_state,
                    'to': current_state
                })
                
                print(f"\n{'='*80}")
                print(f"[{timestamp}] üîÑ STATE: {prev_state.value} ‚Üí {current_state.value}")
                print(f"{'='*80}")
                
                await self._print_state_info(current_state)
                
                prev_state = current_state
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            if hasattr(self.engine, 'position_manager'):
                pm = self.engine.position_manager
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ async –º–µ—Ç–æ–¥ get_active_positions()
                active_positions_list = await pm.get_active_positions() if hasattr(pm, 'get_active_positions') else []
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                if active_positions_list:
                    if not position_opened:
                        position_opened = True
                        position = active_positions_list[0]
                        position_id = position.id if hasattr(position, 'id') else None
                        
                        print(f"\n{'='*80}")
                        print(f"üí∞ –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê!")
                        print(f"{'='*80}")
                        print(f"   Symbol: {position.symbol}")
                        print(f"   Side: {position.side}")
                        print(f"   Size: {position.qty}")
                        print(f"   Entry: ${position.entry:.6f}")
                        if hasattr(position, 'sl') and position.sl is not None:
                            print(f"   Stop: ${position.sl:.6f}")
                        if hasattr(position, 'tp') and position.tp is not None:
                            print(f"   Target: ${position.tp:.6f}")
                        print()
                        
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PnL
                    else:
                        position = active_positions_list[0]
                        if hasattr(position, 'unrealized_pnl') and position.unrealized_pnl is not None:
                            pnl = position.unrealized_pnl
                            pnl_pct = (pnl / (position.entry * position.qty)) * 100 if position.qty > 0 else 0
                            
                            # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                            current_time = time.time()
                            if current_time - last_pnl_time > 10:
                                print(f"   üìà PnL: ${pnl:.2f} ({pnl_pct:+.2f}%) | Price: ${position.current_price:.2f}" if hasattr(position, 'current_price') else f"   üìà PnL: ${pnl:.2f} ({pnl_pct:+.2f}%)")
                                last_pnl_time = current_time
                                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                elif position_opened and not active_positions_list:
                    # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞!
                    print(f"\n{'='*80}")
                    print(f"üèÅ –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê!")
                    print(f"{'='*80}")
                    print(f"   –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {elapsed:.1f}s")
                    print()
                    break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                        
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
            if current_state in [TradingState.ERROR, TradingState.EMERGENCY]:
                print(f"\n‚ùå –î–≤–∏–∂–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state.value}")
                break
                
    async def _print_state_info(self, state: TradingState):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        if state == TradingState.SIZING:
            print("üìè –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏...")
            if hasattr(self.engine, 'signal_manager'):
                signals_count = len(self.engine.signal_manager.pending_signals) if hasattr(self.engine.signal_manager, 'pending_signals') else 0
                print(f"   –°–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {signals_count}")
                
        elif state == TradingState.EXECUTION:
            print("üí∞ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ...")
            print("   (Paper Trading Mode - –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ)")
            
        elif state == TradingState.MANAGING:
            print("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π...")
            if hasattr(self.engine, 'position_manager'):
                pm = self.engine.position_manager
                if hasattr(pm, 'active_positions'):
                    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(pm.active_positions)}")
                    
        elif state == TradingState.IDLE:
            print("‚è∏Ô∏è  –í–æ–∑–≤—Ä–∞—Ç –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è...")
            
        elif state == TradingState.SCANNING:
            print("üîç –ù–æ–≤—ã–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
            
    async def print_summary(self):
        """–ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∞"""
        print("\n" + "="*80)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ê")
        print("="*80)
        
        runtime = datetime.now() - self.start_time
        print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime}")
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        print(f"\nüîÑ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ({len(self.state_history)} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤):")
        for i, record in enumerate(self.state_history, 1):
            print(f"   {i}. [{record['timestamp']}] {record['from'].value} ‚Üí {record['to'].value}")
            
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ
        if self.forced_signal:
            print(f"\n‚ö° –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª:")
            print(f"   Symbol: {self.forced_signal.symbol}")
            print(f"   Type: {self.forced_signal.strategy} {self.forced_signal.side}")
            print(f"   Entry: ${self.forced_signal.entry:.6f}")
            print(f"   Stop: ${self.forced_signal.sl:.6f}")
            print(f"   Target: ${self.forced_signal.tp1:.6f}")
            
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö
        if hasattr(self.engine, 'position_manager'):
            pm = self.engine.position_manager
            
            active_list = await pm.get_active_positions() if hasattr(pm, 'get_active_positions') else []
            closed_list = await pm.get_closed_positions() if hasattr(pm, 'get_closed_positions') else []
            
            print(f"\nüíº –ü–æ–∑–∏—Ü–∏–∏:")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_list)}")
            print(f"   –ó–∞–∫—Ä—ã—Ç—ã—Ö: {len(closed_list)}")
            
            if closed_list:
                total_pnl = 0
                for pos in closed_list:
                    if hasattr(pos, 'realized_pnl'):
                        total_pnl += pos.realized_pnl
                        
                print(f"   –ò—Ç–æ–≥–æ–≤—ã–π PnL: ${total_pnl:.2f}")
                
                # –î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                last_pos = closed_list[-1]
                print(f"\n   –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è:")
                print(f"      Symbol: {last_pos.symbol}")
                print(f"      Entry: ${last_pos.entry_price:.6f}")
                if hasattr(last_pos, 'exit_price'):
                    print(f"      Exit: ${last_pos.exit_price:.6f}")
                if hasattr(last_pos, 'realized_pnl'):
                    print(f"      PnL: ${last_pos.realized_pnl:.2f}")
                if hasattr(last_pos, 'close_reason'):
                    print(f"      Close Reason: {last_pos.close_reason}")
                    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:")
        required_states = [
            TradingState.SIGNAL_WAIT,
            TradingState.SIZING,
            TradingState.EXECUTION,
            TradingState.MANAGING
        ]
        
        passed_states = set(record['to'] for record in self.state_history)
        
        for state in required_states:
            status = "‚úÖ" if state in passed_states else "‚ùå"
            print(f"   {status} {state.value}")
            
        all_passed = all(state in passed_states for state in required_states)
        
        print("\n" + "="*80)
        if all_passed:
            print("üéâ –í–°–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–û–ô–î–ï–ù–´! –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù!")
        else:
            print("‚ö†Ô∏è  –ù–ï –í–°–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–û–ô–î–ï–ù–´")
        print("="*80)
        
    async def run_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        try:
            self.start_time = datetime.now()
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
            await self.setup_engine()
            
            # 2. –ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞ –≤ —Ñ–æ–Ω–µ
            print("üöÄ –ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞...")
            engine_task = asyncio.create_task(self.engine.start())
            
            # 3. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            await self.wait_for_scanning_complete()
            
            # 4. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            await self.create_forced_signal()
            await self.inject_signal()
            
            print("‚è±Ô∏è  –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.test_duration} —Å–µ–∫—É–Ω–¥")
            print()
            
            # 5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
            await self.monitor_trading_cycle()
            
            # 6. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–∫–∞
            print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–æ–∫...")
            await self.engine.stop()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–≤–∏–∂–∫–∞
            engine_task.cancel()
            try:
                await engine_task
            except asyncio.CancelledError:
                pass
                
            # 7. –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
            await self.print_summary()
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            
        finally:
            if self.engine:
                try:
                    await self.engine.stop()
                except:
                    pass


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test = ForcedSignalTest()
    await test.run_test()


if __name__ == "__main__":
    print("\n" + "="*80)
    print("üéØ FORCED SIGNAL TEST")
    print("="*80)
    print("\n–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("–ü–æ–¥—Ö–æ–¥: –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ª—É—á—à–µ–º –∞–∫—Ç–∏–≤–µ –∏–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
    print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
    print("="*80)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
