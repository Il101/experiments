#!/usr/bin/env python3
"""
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ü–æ–ª—É—á–∞–µ—Ç –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏
2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª
3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –¥–≤–∏–∂–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import aiohttp
import json
from datetime import datetime

async def force_signal_generation():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üéØ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏
    async with aiohttp.ClientSession() as session:
        async with session.get('http://localhost:8000/api/scanner/last') as response:
            scan_data = await response.json()
            candidates = scan_data.get('candidates', [])
            
            if not candidates:
                print("‚ùå –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞")
                return
            
            # –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏
            best_candidate = None
            for candidate in candidates:
                if candidate.get('levels') and len(candidate['levels']) > 0:
                    best_candidate = candidate
                    break
            
            if not best_candidate:
                print("‚ùå –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —É—Ä–æ–≤–Ω—è–º–∏")
                return
            
            print(f"üèÜ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç: {best_candidate['symbol']}")
            print(f"üìä Score: {best_candidate['score']:.3f}")
            print(f"üìà –£—Ä–æ–≤–Ω–µ–π: {len(best_candidate['levels'])}")
            print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {sum(1 for v in best_candidate['filters'].values() if v)}/10")
            
            # 2. –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —É—Ä–æ–≤–µ–Ω—å
            best_level = best_candidate['levels'][0]
            print(f"üéØ –õ—É—á—à–∏–π —É—Ä–æ–≤–µ–Ω—å:")
            print(f"  –¢–∏–ø: {best_level['level_type']}")
            print(f"  –¶–µ–Ω–∞: {best_level['price']:.6f}")
            print(f"  –°–∏–ª–∞: {best_level['strength']:.3f}")
            print(f"  –ö–∞—Å–∞–Ω–∏–π: {best_level['touch_count']}")
            
            # 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = {
                "symbol": best_candidate['symbol'],
                "side": "long" if best_level['level_type'] == 'resistance' else 'short',
                "strategy": "momentum",
                "entry_price": best_level['price'] * 1.001,  # –ù–µ–º–Ω–æ–≥–æ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è
                "stop_loss": best_level['price'] * 0.995,   # –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è
                "confidence": 0.8,
                "meta": {
                    "forced": True,
                    "reason": "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞",
                    "level_price": best_level['price'],
                    "level_strength": best_level['strength'],
                    "timestamp": int(datetime.now().timestamp() * 1000)
                }
            }
            
            print(f"\nüìù –°–æ–∑–¥–∞–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª:")
            print(f"  Symbol: {signal['symbol']}")
            print(f"  Side: {signal['side']}")
            print(f"  Entry: {signal['entry_price']:.6f}")
            print(f"  Stop Loss: {signal['stop_loss']:.6f}")
            print(f"  Confidence: {signal['confidence']}")
            
            # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ API
            print(f"\n‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:")
            print(f"  API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤.")
            print(f"  –°–∏–≥–Ω–∞–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø—Ä–æ—à–µ–¥—à–∏—Ö –í–°–ï —Ñ–∏–ª—å—Ç—Ä—ã.")
            print(f"  –¢–µ–∫—É—â–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—à–µ–ª —Ç–æ–ª—å–∫–æ {sum(1 for v in best_candidate['filters'].values() if v)}/10 —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
            
            # 5. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            print(f"\nüí° –†–µ—à–µ–Ω–∏—è:")
            print(f"  1. –û—Å–ª–∞–±–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤ –ø—Ä–µ—Å–µ—Ç–µ breakout_v1")
            print(f"  2. –î–æ–±–∞–≤–∏—Ç—å whitelist –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"  3. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏")
            
            # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ –ø—Ä–æ—à–ª–∏
            failed_filters = [name for name, passed in best_candidate['filters'].items() if not passed]
            print(f"\n‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:")
            for filter_name in failed_filters:
                print(f"  - {filter_name}")
            
            # 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            print(f"\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:")
            if 'min_24h_volume' in failed_filters:
                print(f"  - –£–≤–µ–ª–∏—á–∏—Ç—å min_24h_volume_usd –≤ –ø—Ä–µ—Å–µ—Ç–µ")
            if 'max_spread' in failed_filters:
                print(f"  - –£–≤–µ–ª–∏—á–∏—Ç—å max_spread_bps –≤ –ø—Ä–µ—Å–µ—Ç–µ")
            if 'min_depth_0_5pct' in failed_filters or 'min_depth_0_3pct' in failed_filters:
                print(f"  - –£–º–µ–Ω—å—à–∏—Ç—å min_depth_usd_0_5pct –∏ min_depth_usd_0_3pct –≤ –ø—Ä–µ—Å–µ—Ç–µ")
            if 'atr_range' in failed_filters:
                print(f"  - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å atr_range_min –∏ atr_range_max –≤ –ø—Ä–µ—Å–µ—Ç–µ")

if __name__ == "__main__":
    asyncio.run(force_signal_generation())