#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import asyncio
import time
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from breakout_bot.core.engine import OptimizedOrchestraEngine
from breakout_bot.position.position_manager import PositionManager
from breakout_bot.config.settings import load_preset
from breakout_bot.utils.enhanced_error_handler import enhanced_error_handler
from breakout_bot.utils.safe_math import safe_divide, validate_positive
from breakout_bot.data.models import Position

async def test_engine_initialization():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–≤–∏–∂–∫–∞"""
    print("üîß –¢–µ—Å—Ç–∏—Ä—É—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–≤–∏–∂–∫–∞...")
    
    try:
        # Load preset and initialize engine
        preset = load_preset("breakout_v1_working")
        engine = OptimizedOrchestraEngine()
        
        # Test that all required attributes exist
        required_attrs = [
            'error_count', 'max_retries', 'retry_delay', 
            'last_error', 'retry_backoff', 'health_status',
            'starting_equity', 'last_cycle_time', 'avg_cycle_time'
        ]
        
        for attr in required_attrs:
            assert hasattr(engine, attr), f"Missing required attribute: {attr}"
            print(f"   ‚úÖ Attribute {attr}: {getattr(engine, attr)}")
        
        print("   üéâ Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ engine: {e}")
        return False

async def test_trading_presets():
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä—É—é –Ω–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–µ—Å–µ—Ç—ã...")
    
    try:
        # Test breakout_v1_working preset
        preset = load_preset("breakout_v1_working")
        assert preset.name == "breakout_v1_working"
        assert preset.liquidity_filters.min_24h_volume_usd == 10_000_000  # Realistic
        assert preset.liquidity_filters.max_spread_bps == 25  # Relaxed
        assert preset.scanner_config.max_candidates == 30  # More candidates
        print(f"   ‚úÖ breakout_v1_working loaded: {preset.description}")
        
        # Test ultra-soft test preset
        test_preset = load_preset("breakout_v1_test")
        assert test_preset.name == "breakout_v1_test"
        assert test_preset.liquidity_filters.min_24h_volume_usd == 1_000_000  # Ultra soft
        assert test_preset.liquidity_filters.max_spread_bps == 100  # Very relaxed
        assert test_preset.scanner_config.max_candidates == 50  # Many candidates
        print(f"   ‚úÖ breakout_v1_test loaded: {test_preset.description}")
        
        print("   üéâ –ù–æ–≤—ã–µ –ø—Ä–µ—Å–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–µ—Å–µ—Ç–æ–≤: {e}")
        return False

async def test_safe_math():
    """–¢–µ—Å—Ç safe math utilities"""
    print("\nüî¢ –¢–µ—Å—Ç–∏—Ä—É—é safe math —Ñ—É–Ω–∫—Ü–∏–∏...")
    
    try:
        # Test safe divide
        result = safe_divide(10, 2)
        assert result == 5.0, f"Expected 5.0, got {result}"
        
        result = safe_divide(10, 0, default=999)
        assert result == 999, f"Expected 999 for division by zero, got {result}"
        
        # Test validate positive
        result = validate_positive(5.5, "test")
        assert result == 5.5, f"Expected 5.5, got {result}"
        
        result = validate_positive(-1, "negative", default=10)
        assert result == 10, f"Expected 10 for negative, got {result}"
        
        result = validate_positive("invalid", "invalid", default=20)
        assert result == 20, f"Expected 20 for invalid, got {result}"
        
        print("   ‚úÖ safe_divide —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚úÖ validate_positive —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   üéâ Safe math —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ safe math: {e}")
        return False

async def test_race_conditions_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è race conditions"""
    print("\nüîí –¢–µ—Å—Ç–∏—Ä—É—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ race conditions...")
    
    try:
        preset = load_preset("breakout_v1_working")
        manager = PositionManager(preset)
        
        # Test that methods are async and thread-safe
        assert asyncio.iscoroutinefunction(manager.add_position), "add_position should be async"
        assert asyncio.iscoroutinefunction(manager.remove_position), "remove_position should be async"
        assert asyncio.iscoroutinefunction(manager.update_position), "update_position should be async"
        assert hasattr(manager, '_position_lock'), "Manager should have position lock"
        assert hasattr(manager, '_recent_positions_lock'), "Manager should have recent positions lock"
        
        # Test concurrent operations
        positions = []
        for i in range(5):
            position = Position(
                id=f"test_pos_{i}",
                symbol=f"TEST{i}/USDT",
                side="long",
                strategy="momentum",
                qty=100.0,
                entry=1.0,
                sl=0.95,
                status="open",
                pnl_usd=0.0,
                pnl_r=0.0,
                fees_usd=1.0,
                timestamps={'opened_at': int(time.time() * 1000)},
                meta={}
            )
            positions.append(position)
        
        # Add positions concurrently
        await asyncio.gather(*[manager.add_position(pos) for pos in positions])
        
        active = await manager.get_active_positions()
        assert len(active) == 5, f"Expected 5 active positions, got {len(active)}"
        
        print("   ‚úÖ Async methods —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("   ‚úÖ Thread-safe locks —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("   ‚úÖ Concurrent operations —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("   üéâ Race conditions –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ race conditions: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_enhanced_error_handling():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
    
    try:
        # Test error classification
        network_error = ConnectionError("Network failed")
        category = enhanced_error_handler.classify_error(network_error)
        assert str(category) == "ErrorCategory.NETWORK", f"Expected NETWORK, got {category}"
        
        # Test error stats
        enhanced_error_handler.error_counts.clear()
        enhanced_error_handler._update_error_stats(category)
        stats = enhanced_error_handler.get_error_stats()
        assert stats['total_errors'] == 1, f"Expected 1 error, got {stats['total_errors']}"
        
        print("   ‚úÖ Error classification —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚úÖ Error statistics —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("   üéâ Enhanced error handling —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ error handling: {e}")
        return False

async def test_system_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    
    try:
        # Load realistic preset
        preset = load_preset("breakout_v1_working")
        
        # Initialize engine with all fixes
        engine = OptimizedOrchestraEngine()
        
        # Test that engine has all required components
        components = [
            'error_count', 'health_status', 'starting_equity'
        ]
        
        for component in components:
            assert hasattr(engine, component), f"Engine missing {component}"
        
        # Initialize thread-safe position manager
        pos_manager = PositionManager(preset)
        assert hasattr(pos_manager, '_position_lock'), "Position manager should be thread-safe"
        
        # Test safe math integration
        safe_result = safe_divide(100, 0, default=0)
        assert safe_result == 0, "Safe math should be integrated"
        
        # Test error handler integration
        stats = enhanced_error_handler.get_error_stats()
        assert 'error_counts' in stats, "Enhanced error handler should be available"
        
        print("   ‚úÖ Engine —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("   ‚úÖ Thread-safe PositionManager –≥–æ—Ç–æ–≤") 
        print("   ‚úÖ Safe math –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        print("   ‚úÖ Enhanced error handler –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        print("   ‚úÖ Realistic preset –∑–∞–≥—Ä—É–∂–µ–Ω")
        print("   üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–´!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 60)
    
    tests = [
        ("Engine Initialization Fix", test_engine_initialization),
        ("Trading Presets Fix", test_trading_presets), 
        ("Safe Math Utilities", test_safe_math),
        ("Race Conditions Fix", test_race_conditions_fix),
        ("Enhanced Error Handling", test_enhanced_error_handling),
        ("System Integration", test_system_integration)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{status:12} | {test_name}")
        if result:
            passed += 1
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{len(results)} –¢–ï–°–¢–û–í –ü–†–û–®–õ–ò")
    
    if passed == len(results):
        print("üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –û–¢–õ–ò–ß–ù–û!")
        print("‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION –¢–û–†–ì–û–í–õ–ï!")
        return True
    else:
        print(f"‚ö†Ô∏è  {len(results) - passed} –¢–ï–°–¢–û–í –ù–ï –ü–†–û–®–õ–ò")
        print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
