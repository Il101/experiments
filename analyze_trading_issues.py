#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—á–µ–º—É —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã.
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from breakout_bot.config.settings import load_preset
from breakout_bot.exchange.exchange_client import ExchangeClient
from breakout_bot.scanner.market_scanner import BreakoutScanner
from breakout_bot.data.models import MarketData
from breakout_bot.diagnostics import DiagnosticsCollector

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TradingDiagnostics:
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    
    def __init__(self):
        self.diagnostics = DiagnosticsCollector(enabled=True)
        
    async def analyze_preset_filters(self, preset_name: str = "breakout_v1"):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–µ—Å–µ—Ç–∞."""
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Å–µ—Ç–∞: {preset_name}")
        print("=" * 50)
        
        try:
            preset = load_preset(preset_name)
            print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {preset.description}")
            print(f"üéØ –¶–µ–ª–µ–≤—ã–µ —Ä—ã–Ω–∫–∏: {preset.target_markets}")
            print(f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {preset.strategy_priority}")
            
            print(f"\nüí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞:")
            print(f"  - –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {preset.risk.risk_per_trade:.1%}")
            print(f"  - –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {preset.risk.max_concurrent_positions}")
            print(f"  - –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {preset.risk.daily_risk_limit:.1%}")
            
            print(f"\nüíß –§–∏–ª—å—Ç—Ä—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:")
            print(f"  - –ú–∏–Ω. –æ–±—ä–µ–º 24—á: ${preset.liquidity_filters.min_24h_volume_usd:,}")
            print(f"  - –ú–∏–Ω. OI: ${preset.liquidity_filters.min_oi_usd:,}")
            print(f"  - –ú–∞–∫—Å. —Å–ø—Ä–µ–¥: {preset.liquidity_filters.max_spread_bps} bps")
            print(f"  - –ú–∏–Ω. –≥–ª—É–±–∏–Ω–∞ 0.5%: ${preset.liquidity_filters.min_depth_usd_0_5pct:,}")
            print(f"  - –ú–∏–Ω. –≥–ª—É–±–∏–Ω–∞ 0.3%: ${preset.liquidity_filters.min_depth_usd_0_3pct:,}")
            print(f"  - –ú–∏–Ω. —Å–¥–µ–ª–æ–∫/–º–∏–Ω: {preset.liquidity_filters.min_trades_per_minute}")
            
            print(f"\nüìä –§–∏–ª—å—Ç—Ä—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:")
            print(f"  - ATR –¥–∏–∞–ø–∞–∑–æ–Ω: {preset.volatility_filters.atr_range_min:.3f} - {preset.volatility_filters.atr_range_max:.3f}")
            print(f"  - BB —à–∏—Ä–∏–Ω–∞ –º–∞–∫—Å: {preset.volatility_filters.bb_width_percentile_max}%")
            print(f"  - –í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ 1—á: {preset.volatility_filters.volume_surge_1h_min}x")
            print(f"  - –í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ 5–º: {preset.volatility_filters.volume_surge_5m_min}x")
            print(f"  - OI –¥–µ–ª—å—Ç–∞: {preset.volatility_filters.oi_delta_threshold:.3f}")
            
            print(f"\nüéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞:")
            print(f"  - –ú–∞–∫—Å. –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {preset.scanner_config.max_candidates}")
            print(f"  - –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {preset.scanner_config.scan_interval_seconds}—Å")
            print(f"  - –¢–æ–ø –ø–æ –æ–±—ä–µ–º—É: {preset.scanner_config.top_n_by_volume}")
            
            return preset
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞: {e}")
            return None
    
    async def test_market_data(self, preset_name: str = "breakout_v1"):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        print(f"\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("=" * 50)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏
            exchange_client = ExchangeClient()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä—ã–Ω–∫–æ–≤
            markets = await exchange_client.fetch_markets()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(markets)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT-M —Ñ—å—é—á–µ—Ä—Å—ã
            usdt_markets = [m for m in markets if m['type'] == 'future' and m['quote'] == 'USDT']
            print(f"üìä USDT-M —Ñ—å—é—á–µ—Ä—Å—ã: {len(usdt_markets)}")
            
            # –ë–µ—Ä–µ–º —Ç–æ–ø-10 –ø–æ –æ–±—ä–µ–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            top_markets = usdt_markets[:10]
            
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø-10 —Ä—ã–Ω–∫–æ–≤:")
            for i, market in enumerate(top_markets, 1):
                symbol = market['symbol']
                print(f"  {i}. {symbol}")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
                    market_data = await exchange_client.fetch_market_data(symbol)
                    
                    if market_data:
                        print(f"     üí∞ –¶–µ–Ω–∞: ${market_data.price:,.2f}")
                        print(f"     üìä –û–±—ä–µ–º 24—á: ${market_data.volume_24h_usd:,.0f}")
                        print(f"     üîÑ OI: ${market_data.oi_usd:,.0f}" if market_data.oi_usd else "     üîÑ OI: N/A")
                        print(f"     üìè –°–ø—Ä–µ–¥: {market_data.l2_depth.spread_bps:.1f} bps")
                        print(f"     üìà ATR 15–º: {market_data.atr_15m:.4f}")
                        print(f"     üìä BB —à–∏—Ä–∏–Ω–∞: {market_data.bb_width_pct:.1f}%")
                        print(f"     üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è BTC: {market_data.btc_correlation:.2f}")
                        print()
                    
                except Exception as e:
                    print(f"     ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                    print()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    async def test_scanner_filters(self, preset_name: str = "breakout_v1"):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∫–∞–Ω–µ—Ä–∞."""
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∫–∞–Ω–µ—Ä–∞")
        print("=" * 50)
        
        try:
            preset = load_preset(preset_name)
            scanner = BreakoutScanner(preset, self.diagnostics)
            exchange_client = ExchangeClient()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            markets = await exchange_client.fetch_markets()
            usdt_markets = [m for m in markets if m['type'] == 'future' and m['quote'] == 'USDT']
            
            # –ë–µ—Ä–µ–º —Ç–æ–ø-20 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            test_markets = usdt_markets[:20]
            print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_markets)} —Ä—ã–Ω–∫–æ–≤...")
            
            passed_count = 0
            failed_filters = {}
            
            for market in test_markets:
                symbol = market['symbol']
                try:
                    market_data = await exchange_client.fetch_market_data(symbol)
                    if not market_data:
                        continue
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    scan_result = await scanner._scan_single_market(market_data)
                    
                    if scan_result and scan_result.passed_all_filters:
                        passed_count += 1
                        print(f"‚úÖ {symbol}: –ü–†–û–®–ï–õ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã (–æ—Ü–µ–Ω–∫–∞: {scan_result.score:.2f})")
                    else:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ –ø—Ä–æ—à–ª–∏
                        if scan_result:
                            failed = []
                            for filter_name, result in scan_result.filter_results.items():
                                if not result.passed:
                                    failed.append(f"{filter_name}: {result.reason}")
                            
                            if failed:
                                failed_filters[symbol] = failed
                                print(f"‚ùå {symbol}: –ù–ï –ü–†–û–®–ï–õ - {', '.join(failed[:3])}")
                        else:
                            print(f"‚ùå {symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    
                except Exception as e:
                    print(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ - {e}")
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
            print(f"  ‚úÖ –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã: {passed_count}/{len(test_markets)} ({passed_count/len(test_markets)*100:.1f}%)")
            
            if failed_filters:
                print(f"\nüîç –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞:")
                filter_failures = {}
                for symbol, failures in failed_filters.items():
                    for failure in failures:
                        filter_name = failure.split(':')[0]
                        filter_failures[filter_name] = filter_failures.get(filter_name, 0) + 1
                
                sorted_failures = sorted(filter_failures.items(), key=lambda x: x[1], reverse=True)
                for filter_name, count in sorted_failures[:5]:
                    print(f"  - {filter_name}: {count} —Ä–∞–∑")
            
            return passed_count > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–∞: {e}")
            return False
    
    async def analyze_signal_conditions(self, preset_name: str = "breakout_v1"):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É—Å–ª–æ–≤–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        print(f"\n‚ö° –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("=" * 50)
        
        try:
            preset = load_preset(preset_name)
            
            print(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {preset.strategy_priority}")
            print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:")
            print(f"  - –ú–æ–º–µ–Ω—Ç—É–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞: {preset.signal_config.momentum_volume_multiplier}")
            print(f"  - –ú–∏–Ω. —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–ª–∞: {preset.signal_config.momentum_body_ratio_min}")
            print(f"  - –≠–ø—Å–∏–ª–æ–Ω: {preset.signal_config.momentum_epsilon}")
            print(f"  - –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ—Ç–µ—Å—Ç–∞: {preset.signal_config.retest_pierce_tolerance}")
            print(f"  - –ú–∞–∫—Å. –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ ATR: {preset.signal_config.retest_max_pierce_atr}")
            print(f"  - –ü–æ—Ä–æ–≥ L2 –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞: {preset.signal_config.l2_imbalance_threshold}")
            print(f"  - –ú–∞–∫—Å. —Ä–∞–∑—Ä—ã–≤ VWAP: {preset.signal_config.vwap_gap_max_atr}")
            
            print(f"\nüîç –¢—Ä–µ–±—É–µ–º—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –º–æ–º–µ–Ω—Ç—É–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
            print(f"  ‚úÖ price_breakout - –ø—Ä–æ—Ä—ã–≤ —É—Ä–æ–≤–Ω—è")
            print(f"  ‚úÖ volume_surge - –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞")
            print(f"  ‚úÖ body_ratio - —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–ª–∞ —Å–≤–µ—á–∏")
            print(f"  ‚úÖ l2_imbalance - –¥–∏—Å–±–∞–ª–∞–Ω—Å L2")
            
            print(f"\nüîç –¢—Ä–µ–±—É–µ–º—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–µ—Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
            print(f"  ‚úÖ level_retest - —Ä–µ—Ç–µ—Å—Ç —É—Ä–æ–≤–Ω—è")
            print(f"  ‚úÖ pierce_tolerance - —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è")
            print(f"  ‚úÖ l2_imbalance - –¥–∏—Å–±–∞–ª–∞–Ω—Å L2")
            print(f"  ‚úÖ trading_activity - —Ç–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return False
    
    async def run_full_diagnostics(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É."""
        print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´")
        print("=" * 60)
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤
        preset = await self.analyze_preset_filters("breakout_v1")
        if not preset:
            return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data_ok = await self.test_market_data("breakout_v1")
        if not data_ok:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters_ok = await self.test_scanner_filters("breakout_v1")
        if not filters_ok:
            print("‚ùå –§–∏–ª—å—Ç—Ä—ã —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ - –Ω–∏ –æ–¥–∏–Ω —Ä—ã–Ω–æ–∫ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_ok = await self.analyze_signal_conditions("breakout_v1")
        
        print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 30)
        print(f"‚úÖ –ü—Ä–µ—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {'–î–∞' if preset else '–ù–µ—Ç'}")
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {'–î–∞' if data_ok else '–ù–µ—Ç'}")
        print(f"‚úÖ –§–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç: {'–î–∞' if filters_ok else '–ù–µ—Ç'}")
        print(f"‚úÖ –°–∏–≥–Ω–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {'–î–∞' if signals_ok else '–ù–µ—Ç'}")
        
        if not filters_ok:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print(f"  1. –°–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
            print(f"  2. –£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–ø—Ä–µ–¥")
            print(f"  3. –°–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—ä–µ–º—É")
            print(f"  4. –£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
        
        return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    diagnostics = TradingDiagnostics()
    await diagnostics.run_full_diagnostics()

if __name__ == "__main__":
    asyncio.run(main())
