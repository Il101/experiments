"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥–≤–∏–∂–∫–æ–º.
"""

import asyncio
import sys
import os
import traceback

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from breakout_bot.core.engine import OptimizedOrchestraEngine
from breakout_bot.config.settings import SystemConfig


async def debug_engine_startup():
    """–û—Ç–ª–∞–¥–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–≤–∏–∂–∫–∞."""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –¥–≤–∏–∂–∫–∞...")
    
    try:
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        system_config = SystemConfig()
        system_config.trading_mode = 'paper'
        print("‚úÖ SystemConfig —Å–æ–∑–¥–∞–Ω")
        
        print("2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞...")
        engine = OptimizedOrchestraEngine(
            preset_name=None,
            system_config=system_config
        )
        print("‚úÖ –î–≤–∏–∂–æ–∫ —Å–æ–∑–¥–∞–Ω")
        
        print("3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞...")
        await engine.initialize()
        print("‚úÖ –î–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
        status = engine.get_status()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {status['status']}")
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status.get('orchestrator', {}).get('current_state', 'unknown')}")
        
        print("5. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞...")
        # –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ start —Ä–∞–±–æ—Ç–∞–µ—Ç
        await engine.start()
        
        print("‚úÖ –î–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∏–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await engine.stop()
        print("‚úÖ –î–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        print("üìç Stack trace:")
        traceback.print_exc()
        return False


async def test_individual_components():
    """–¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç StateMachine
        from breakout_bot.core.state_machine import StateMachine, TradingState
        sm = StateMachine()
        print("‚úÖ StateMachine —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç ErrorHandler  
        from breakout_bot.core.error_handler import ErrorHandler
        eh = ErrorHandler(max_retries=3)
        print("‚úÖ ErrorHandler —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        from breakout_bot.core.scanning_manager import ScanningManager
        from breakout_bot.core.signal_manager import SignalManager
        from breakout_bot.core.resource_manager import ResourceManager
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö: {e}")
        traceback.print_exc()
        return False


async def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    critical_imports = [
        'asyncio', 'logging', 'time', 'os', 
        'typing', 'datetime', 'uuid',
        'pydantic', 'psutil'
    ]
    
    for module_name in critical_imports:
        try:
            __import__(module_name)
            print(f"‚úÖ {module_name}")
        except ImportError as e:
            print(f"‚ùå {module_name}: {e}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
    internal_modules = [
        'breakout_bot.config',
        'breakout_bot.exchange', 
        'breakout_bot.scanner',
        'breakout_bot.signals',
        'breakout_bot.risk',
        'breakout_bot.position'
    ]
    
    for module_name in internal_modules:
        try:
            __import__(module_name)
            print(f"‚úÖ {module_name}")
        except ImportError as e:
            print(f"‚ùå {module_name}: {e}")
            return False
    
    return True


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏."""
    print("üö® –û–¢–õ–ê–î–ö–ê –ü–†–û–ë–õ–ï–ú –° –î–í–ò–ñ–ö–û–ú\n")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    deps_ok = await check_dependencies()
    if not deps_ok:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏!")
        return False
    
    # 2. –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    components_ok = await test_individual_components()
    if not components_ok:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏!")
        return False
    
    # 3. –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –¥–≤–∏–∂–∫–∞
    engine_ok = await debug_engine_startup()
    if not engine_ok:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º –¥–≤–∏–∂–∫–∞!")
        return False
    
    print("\nüéâ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢ –ù–û–†–ú–ê–õ–¨–ù–û!")
    print("–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å–ø–æ—Å–æ–±–µ –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
    print("–ö–∞–∫ –∏–º–µ–Ω–Ω–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–∂–æ–∫?")
    
    return True


if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        if not success:
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            print("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ paper trading")
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Ç–ª–∞–¥–∫–µ: {e}")
        traceback.print_exc()
        sys.exit(1)



