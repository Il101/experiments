#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–¥–µ–ª–∫–∏ –æ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–≤–∏–∂–æ–∫ –≤ paper —Ä–µ–∂–∏–º–µ
2. –ñ–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
3. –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é
4. –°–∏–º—É–ª–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
5. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
"""

import asyncio
import logging
import time
import json
from datetime import datetime, timedelta
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TradeCycleTester:
    """–¢–µ—Å—Ç–µ—Ä –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–¥–µ–ª–∫–∏."""
    
    def __init__(self):
        self.engine_status = None
        self.scan_results = []
        self.signals = []
        self.positions = []
        self.test_start_time = None
        
    async def run_full_cycle_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ü–∏–∫–ª–∞ —Å–¥–µ–ª–∫–∏."""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–¥–µ–ª–∫–∏")
        self.test_start_time = datetime.now()
        
        try:
            # 1. –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫
            await self.start_engine()
            
            # 2. –ñ–¥–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            await self.wait_for_signals()
            
            # 3. –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            await self.open_position()
            
            # 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π
            await self.simulate_price_movement()
            
            # 5. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            await self.track_position_closure()
            
            # 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self.analyze_results()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            raise
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–æ–∫
            await self.stop_engine()
    
    async def start_engine(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–≤–∏–∂–æ–∫ –≤ paper —Ä–µ–∂–∏–º–µ."""
        logger.info("üìä –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫...")
        
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.post(
                'http://localhost:8000/api/engine/start',
                json={'preset': 'breakout_v1', 'mode': 'paper'}
            ) as response:
                result = await response.json()
                if result.get('success'):
                    logger.info("‚úÖ –î–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–∂–æ–∫: {result}")
    
    async def wait_for_signals(self, max_wait_minutes=10):
        """–ñ–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        logger.info("‚è≥ –ñ–¥–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        start_time = time.time()
        max_wait_seconds = max_wait_minutes * 60
        
        while time.time() - start_time < max_wait_seconds:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞
            engine_status = await self.get_engine_status()
            
            if engine_status.get('state') == 'signal_wait':
                logger.info("üéØ –î–≤–∏–∂–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                scan_results = await self.get_scan_results()
                if scan_results and len(scan_results) > 0:
                    logger.info(f"üìà –ù–∞–π–¥–µ–Ω–æ {len(scan_results)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
                    self.scan_results = scan_results
                    break
            
            elif engine_status.get('state') == 'execution':
                logger.info("‚ö° –î–≤–∏–∂–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
                break
            
            elif engine_status.get('state') == 'managing':
                logger.info("üìä –î–≤–∏–∂–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏")
                break
            
            await asyncio.sleep(5)
        
        if not self.scan_results:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    async def open_position(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é."""
        logger.info("üíº –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é...")
        
        # –ñ–¥–µ–º, –ø–æ–∫–∞ –¥–≤–∏–∂–æ–∫ –æ—Ç–∫—Ä–æ–µ—Ç –ø–æ–∑–∏—Ü–∏—é
        max_wait_seconds = 300  # 5 –º–∏–Ω—É—Ç
        start_time = time.time()
        
        while time.time() - start_time < max_wait_seconds:
            engine_status = await self.get_engine_status()
            
            if engine_status.get('state') == 'managing':
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                positions = await self.get_positions()
                if positions and len(positions) > 0:
                    logger.info(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π")
                    self.positions = positions
                    break
            
            await asyncio.sleep(5)
        
        if not self.positions:
            logger.warning("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –±—ã–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã")
    
    async def simulate_price_movement(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π."""
        logger.info("üìà –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã...")
        
        if not self.positions:
            logger.warning("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏")
            return
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
        scenarios = [
            {"name": "–£—Å–ø–µ—à–Ω—ã–π TP1", "price_change": 0.02, "duration": 30},
            {"name": "–£—Å–ø–µ—à–Ω—ã–π TP2", "price_change": 0.04, "duration": 60},
            {"name": "–°—Ç–æ–ø-–ª–æ—Å—Å", "price_change": -0.02, "duration": 20},
            {"name": "–¢—Ä–µ–π–ª–∏–Ω–≥", "price_change": 0.03, "duration": 45},
        ]
        
        for scenario in scenarios:
            logger.info(f"üé≠ –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
            
            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(scenario['duration'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–π
            positions = await self.get_positions()
            if not positions:
                logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
                break
            
            logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
    
    async def track_position_closure(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π."""
        logger.info("üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π...")
        
        max_wait_seconds = 600  # 10 –º–∏–Ω—É—Ç
        start_time = time.time()
        
        while time.time() - start_time < max_wait_seconds:
            positions = await self.get_positions()
            
            if not positions:
                logger.info("‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
                break
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–π
            for pos in positions:
                logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è {pos['symbol']}: {pos['status']}")
            
            await asyncio.sleep(10)
    
    async def analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞."""
        logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        final_positions = await self.get_positions()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        metrics = await self.get_engine_metrics()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'test_duration': (datetime.now() - self.test_start_time).total_seconds(),
            'scan_results_count': len(self.scan_results),
            'signals_generated': len(self.signals),
            'positions_opened': len(self.positions),
            'positions_closed': len(self.positions) - len(final_positions),
            'final_positions': final_positions,
            'engine_metrics': metrics
        }
        
        logger.info("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
        logger.info(f"  ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {results['test_duration']:.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"  üîç –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {results['scan_results_count']}")
        logger.info(f"  üéØ –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {results['signals_generated']}")
        logger.info(f"  üíº –ü–æ–∑–∏—Ü–∏–π –æ—Ç–∫—Ä—ã—Ç–æ: {results['positions_opened']}")
        logger.info(f"  ‚úÖ –ü–æ–∑–∏—Ü–∏–π –∑–∞–∫—Ä—ã—Ç–æ: {results['positions_closed']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        with open('trade_cycle_test_results.json', 'w') as f:
            json.dump(results, f, indent=2, default=str)
        
        logger.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ trade_cycle_test_results.json")
    
    async def get_engine_status(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞."""
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get('http://localhost:8000/api/engine/status') as response:
                return await response.json()
    
    async def get_scan_results(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get('http://localhost:8000/api/scanner/last') as response:
                data = await response.json()
                return data.get('candidates', [])
    
    async def get_positions(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏."""
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get('http://localhost:8000/api/trading/positions') as response:
                data = await response.json()
                return data.get('positions', [])
    
    async def get_engine_metrics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–≤–∏–∂–∫–∞."""
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get('http://localhost:8000/api/engine/metrics') as response:
                return await response.json()
    
    async def stop_engine(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–≤–∏–∂–æ–∫."""
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–æ–∫...")
        
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.post('http://localhost:8000/api/engine/stop') as response:
                result = await response.json()
                if result.get('success'):
                    logger.info("‚úÖ –î–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–≤–∏–∂–æ–∫")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    tester = TradeCycleTester()
    await tester.run_full_cycle_test()


if __name__ == "__main__":
    asyncio.run(main())
