#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞.
"""

import asyncio
import aiohttp
import json

async def check_endpoint(session, url, name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞."""
    try:
        async with session.get(url) as response:
            data = await response.json()
            print(f"‚úÖ {name}: {response.status}")
            return True, data
    except Exception as e:
        print(f"‚ùå {name}: {e}")
        return False, None

async def main():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    print("=" * 40)
    
    base_url = "http://localhost:8000/api"
    endpoints = [
        (f"{base_url}/engine/status", "–°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞"),
        (f"{base_url}/engine/metrics", "–ú–µ—Ç—Ä–∏–∫–∏ –¥–≤–∏–∂–∫–∞"),
        (f"{base_url}/scanner/last", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"),
        (f"{base_url}/trading/positions", "–ü–æ–∑–∏—Ü–∏–∏"),
        (f"{base_url}/monitoring/current-session", "–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è"),
    ]
    
    async with aiohttp.ClientSession() as session:
        results = {}
        
        for url, name in endpoints:
            success, data = await check_endpoint(session, url, name)
            results[name] = {"success": success, "data": data}
        
        print("\nüìä –°–≤–æ–¥–∫–∞:")
        for name, result in results.items():
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"  {status} {name}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        print("\nüìà –î–µ—Ç–∞–ª–∏:")
        
        if results["–°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞"]["success"]:
            status_data = results["–°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞"]["data"]
            print(f"  üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status_data.get('state', 'unknown')}")
            print(f"  üìà –ü–æ–∑–∏—Ü–∏–π: {status_data.get('openPositions', 0)}")
            print(f"  üí∞ PnL: {status_data.get('dailyR', 0):.4f}")
        
        if results["–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"]["success"]:
            scan_data = results["–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"]["data"]
            candidates = scan_data.get('candidates', [])
            print(f"  üîç –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates)}")
            if candidates:
                best = candidates[0]
                print(f"  üèÜ –õ—É—á—à–∏–π: {best['symbol']} (score: {best['score']:.3f})")
        
        if results["–ü–æ–∑–∏—Ü–∏–∏"]["success"]:
            positions_data = results["–ü–æ–∑–∏—Ü–∏–∏"]["data"]
            if isinstance(positions_data, list):
                positions = positions_data
            else:
                positions = positions_data.get('positions', [])
            print(f"  üíº –ü–æ–∑–∏—Ü–∏–π: {len(positions)}")
            for pos in positions:
                print(f"    üìä {pos['symbol']}: {pos['side']} {pos['qty']} @ {pos['entry']}")

if __name__ == "__main__":
    asyncio.run(main())
