#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Bybit API.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
2. –ü–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
3. Rate limits –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
4. –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ 429 (Too Many Requests)
"""

import asyncio
import time
import os
import sys
from typing import Dict, List, Any, Optional
from datetime import datetime
from collections import defaultdict
import ccxt.async_support as ccxt_async

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from breakout_bot.config.settings import SystemConfig
from breakout_bot.exchange import ExchangeClient, MarketDataProvider
from breakout_bot.data.models import MarketData


class BybitDataTester:
    """–¢–µ—Å—Ç–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Bybit."""
    
    def __init__(self):
        self.config = SystemConfig()
        self.exchange_client = None
        self.market_data_provider = None
        self.results = {
            'successful_requests': 0,
            'failed_requests': 0,
            'rate_limit_errors': 0,
            'timeout_errors': 0,
            'other_errors': 0,
            'total_time': 0,
            'avg_response_time': 0,
            'symbols_tested': 0,
            'complete_data_count': 0,
            'incomplete_data_count': 0,
            'errors_by_type': defaultdict(int),
            'response_times': []
        }
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ Bybit...")
        self.exchange_client = ExchangeClient(self.config)
        self.market_data_provider = MarketDataProvider(
            self.exchange_client,
            enable_websocket=False  # –¢–æ–ª—å–∫–æ REST API
        )
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n")
        
    async def test_single_symbol_data(self, symbol: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞."""
        start_time = time.time()
        result = {
            'symbol': symbol,
            'success': False,
            'data_completeness': {},
            'response_time': 0,
            'error': None,
            'timestamp': datetime.now().isoformat()
        }
        
        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = await self.market_data_provider.get_market_data(symbol)
            
            response_time = time.time() - start_time
            result['response_time'] = response_time
            self.results['response_times'].append(response_time)
            
            if market_data:
                result['success'] = True
                self.results['successful_requests'] += 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
                completeness = {
                    'has_price': market_data.price is not None and market_data.price > 0,
                    'has_volume': market_data.volume_24h_usd is not None and market_data.volume_24h_usd > 0,
                    'has_oi': market_data.oi_usd is not None and market_data.oi_usd > 0,
                    'has_trades_per_min': market_data.trades_per_minute is not None and market_data.trades_per_minute > 0,
                    'has_atr_5m': market_data.atr_5m is not None and market_data.atr_5m > 0,
                    'has_atr_15m': market_data.atr_15m is not None and market_data.atr_15m > 0,
                    'has_bb_width': market_data.bb_width_pct is not None and market_data.bb_width_pct > 0,
                    'has_depth': market_data.l2_depth is not None,
                    'has_candles': market_data.candles_5m is not None and len(market_data.candles_5m) > 0,
                }
                
                result['data_completeness'] = completeness
                result['data'] = {
                    'price': market_data.price,
                    'volume_24h': market_data.volume_24h_usd,
                    'oi_usd': market_data.oi_usd,
                    'trades_per_min': market_data.trades_per_minute,
                    'atr_5m': market_data.atr_5m,
                    'atr_15m': market_data.atr_15m,
                    'bb_width_pct': market_data.bb_width_pct,
                    'btc_correlation': market_data.btc_correlation,
                    'candles_count': len(market_data.candles_5m) if market_data.candles_5m else 0,
                    'depth_bid_0.5': market_data.l2_depth.bid_usd_0_5pct if market_data.l2_depth else 0,
                    'depth_ask_0.5': market_data.l2_depth.ask_usd_0_5pct if market_data.l2_depth else 0,
                    'spread_bps': market_data.l2_depth.spread_bps if market_data.l2_depth else 0,
                }
                
                # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª–Ω–æ—Ç—ã
                complete_fields = sum(1 for v in completeness.values() if v)
                total_fields = len(completeness)
                
                if complete_fields == total_fields:
                    self.results['complete_data_count'] += 1
                else:
                    self.results['incomplete_data_count'] += 1
                    
            else:
                result['error'] = "No data returned"
                self.results['failed_requests'] += 1
                
        except asyncio.TimeoutError:
            result['error'] = "Timeout"
            self.results['timeout_errors'] += 1
            self.results['failed_requests'] += 1
            
        except Exception as e:
            error_str = str(e)
            result['error'] = error_str
            self.results['failed_requests'] += 1
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫
            if '429' in error_str or 'rate limit' in error_str.lower():
                self.results['rate_limit_errors'] += 1
                self.results['errors_by_type']['rate_limit'] += 1
            elif 'timeout' in error_str.lower():
                self.results['timeout_errors'] += 1
                self.results['errors_by_type']['timeout'] += 1
            else:
                self.results['other_errors'] += 1
                self.results['errors_by_type']['other'] += 1
                
        return result
        
    async def test_concurrent_requests(self, symbols: List[str], concurrency: int) -> List[Dict[str, Any]]:
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω–æ–π concurrency."""
        print(f"üìä –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤, concurrency={concurrency}")
        
        semaphore = asyncio.Semaphore(concurrency)
        
        async def bounded_fetch(symbol: str):
            async with semaphore:
                return await self.test_single_symbol_data(symbol)
                
        start_time = time.time()
        results = await asyncio.gather(*[bounded_fetch(s) for s in symbols], return_exceptions=True)
        total_time = time.time() - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f}s")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–∏–º–≤–æ–ª: {total_time/len(symbols):.2f}s")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {self.results['successful_requests']}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {self.results['failed_requests']}")
        
        return [r for r in results if not isinstance(r, Exception)]
        
    async def test_rate_limits(self):
        """–¢–µ—Å—Ç rate limits - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏."""
        print("\n" + "="*80)
        print("üîç –¢–ï–°–¢ RATE LIMITS")
        print("="*80 + "\n")
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
        symbols = await self.exchange_client.fetch_markets()
        test_symbols = symbols[:20]  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 20 —Å–∏–º–≤–æ–ª–∞—Ö
        
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_symbols)} —Å–∏–º–≤–æ–ª–∞—Ö: {', '.join(test_symbols[:5])}...\n")
        
        concurrency_levels = [1, 5, 10, 15, 20, 25, 30]
        
        for concurrency in concurrency_levels:
            print(f"\n{'‚îÄ'*80}")
            print(f"–¢–µ—Å—Ç —Å concurrency = {concurrency}")
            print('‚îÄ'*80)
            
            # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
            test_start = time.time()
            prev_successful = self.results['successful_requests']
            prev_rate_limit = self.results['rate_limit_errors']
            
            await self.test_concurrent_requests(test_symbols[:10], concurrency)
            
            test_duration = time.time() - test_start
            new_successful = self.results['successful_requests'] - prev_successful
            new_rate_limit = self.results['rate_limit_errors'] - prev_rate_limit
            
            requests_per_second = new_successful / test_duration if test_duration > 0 else 0
            
            print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {new_successful}/10")
            print(f"   Rate limit –æ—à–∏–±–æ–∫: {new_rate_limit}")
            print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {requests_per_second:.2f} req/s")
            
            if new_rate_limit > 0:
                print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã rate limit –æ—à–∏–±–∫–∏!")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è concurrency: {concurrency - 5}")
                break
                
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(2)
            
    async def test_data_freshness(self, symbol: str = 'BTC/USDT:USDT'):
        """–¢–µ—Å—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö - –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã."""
        print("\n" + "="*80)
        print("üïê –¢–ï–°–¢ –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
        print("="*80 + "\n")
        
        print(f"–°–∏–º–≤–æ–ª: {symbol}")
        print("–í—ã–ø–æ–ª–Ω—è–µ–º 5 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 —Å–µ–∫—É–Ω–¥—ã...\n")
        
        prices = []
        timestamps = []
        
        for i in range(5):
            result = await self.test_single_symbol_data(symbol)
            
            if result['success']:
                price = result['data']['price']
                prices.append(price)
                timestamps.append(datetime.now())
                
                print(f"–ó–∞–ø—Ä–æ—Å {i+1}: Price = ${price:,.2f}, Response time = {result['response_time']:.2f}s")
            else:
                print(f"–ó–∞–ø—Ä–æ—Å {i+1}: FAILED - {result['error']}")
                
            if i < 4:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                await asyncio.sleep(2)
                
        if len(prices) > 1:
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑:")
            print(f"   –¶–µ–Ω—ã: {', '.join([f'${p:,.2f}' for p in prices])}")
            print(f"   –†–∞–∑–±—Ä–æ—Å: ${max(prices) - min(prices):,.2f}")
            print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {((prices[-1] - prices[0]) / prices[0] * 100):.3f}%")
            print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏" if prices[-1] != prices[0] else 
                  "‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã")
                  
    async def test_complete_data_structure(self, symbol: str = 'BTC/USDT:USDT'):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞."""
        print("\n" + "="*80)
        print("üî¨ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•")
        print("="*80 + "\n")
        
        print(f"–°–∏–º–≤–æ–ª: {symbol}\n")
        
        result = await self.test_single_symbol_data(symbol)
        
        if result['success']:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã\n")
            
            print("üìã –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:")
            for field, has_data in result['data_completeness'].items():
                status = "‚úÖ" if has_data else "‚ùå"
                print(f"   {status} {field}")
                
            print("\nüìä –ó–Ω–∞—á–µ–Ω–∏—è:")
            for field, value in result['data'].items():
                if isinstance(value, float):
                    print(f"   {field}: {value:.6f}")
                else:
                    print(f"   {field}: {value}")
                    
            print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result['response_time']:.2f}s")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {result['error']}")
            
    async def test_multiple_symbols_detailed(self, symbols: List[str]):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        print("\n" + "="*80)
        print("üìö –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ù–ï–°–ö–û–õ–¨–ö–ò–• –°–ò–ú–í–û–õ–û–í")
        print("="*80 + "\n")
        
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤: {', '.join(symbols)}\n")
        
        results = await self.test_concurrent_requests(symbols, concurrency=10)
        
        print("\nüìä –°–í–û–î–ö–ê –ü–û –°–ò–ú–í–û–õ–ê–ú:")
        print("‚îÄ"*80)
        
        for result in results:
            if result['success']:
                completeness = sum(1 for v in result['data_completeness'].values() if v)
                total = len(result['data_completeness'])
                status = "‚úÖ" if completeness == total else "‚ö†Ô∏è "
                print(f"{status} {result['symbol']:20s} | –ü–æ–ª–Ω–æ—Ç–∞: {completeness}/{total} | "
                      f"–í—Ä–µ–º—è: {result['response_time']:.2f}s | "
                      f"–¶–µ–Ω–∞: ${result['data']['price']:,.2f}")
            else:
                print(f"‚ùå {result['symbol']:20s} | FAILED: {result['error']}")
                
    def print_final_summary(self):
        """–ü–µ—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏."""
        print("\n" + "="*80)
        print("üìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê")
        print("="*80 + "\n")
        
        total_requests = self.results['successful_requests'] + self.results['failed_requests']
        success_rate = (self.results['successful_requests'] / total_requests * 100) if total_requests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {self.results['successful_requests']} ({success_rate:.1f}%)")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {self.results['failed_requests']}")
        print(f"\n–û—à–∏–±–∫–∏:")
        print(f"   Rate limit (429): {self.results['rate_limit_errors']}")
        print(f"   Timeout: {self.results['timeout_errors']}")
        print(f"   –î—Ä—É–≥–∏–µ: {self.results['other_errors']}")
        
        if self.results['response_times']:
            avg_time = sum(self.results['response_times']) / len(self.results['response_times'])
            min_time = min(self.results['response_times'])
            max_time = max(self.results['response_times'])
            
            print(f"\n–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_time:.2f}s")
            print(f"   –ú–∏–Ω–∏–º—É–º: {min_time:.2f}s")
            print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_time:.2f}s")
            
        print(f"\n–ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –ü–æ–ª–Ω—ã–µ: {self.results['complete_data_count']}")
        print(f"   –ù–µ–ø–æ–ª–Ω—ã–µ: {self.results['incomplete_data_count']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\n" + "="*80)
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("="*80 + "\n")
        
        if self.results['rate_limit_errors'] > 0:
            print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã rate limit –æ—à–∏–±–∫–∏!")
            print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   - –£–º–µ–Ω—å—à–∏—Ç–µ LIVE_SCAN_CONCURRENCY –≤ .env")
            print("   - –£–≤–µ–ª–∏—á—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è rate limiter")
        else:
            print("‚úÖ Rate limit –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
        if avg_time > 2.0:
            print("\n‚ö†Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ > 2 —Å–µ–∫—É–Ω–¥")
            print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            print("   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ WebSocket –¥–ª—è real-time –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("\n‚úÖ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ –Ω–æ—Ä–º–µ")
            
        if self.results['incomplete_data_count'] > self.results['complete_data_count']:
            print("\n‚ö†Ô∏è  –ú–Ω–æ–≥–æ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫")
            print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API keys –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (–µ—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è)")
        else:
            print("\n‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω—ã–µ")
            
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if self.results['successful_requests'] > 0 and self.results['rate_limit_errors'] == 0:
            print("\nüéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø .env:")
            print("‚îÄ"*80)
            
            if avg_time < 1.0:
                recommended_concurrency = 20
            elif avg_time < 2.0:
                recommended_concurrency = 15
            else:
                recommended_concurrency = 10
                
            print(f"ENGINE_MARKET_FETCH_LIMIT=50")
            print(f"LIVE_SCAN_CONCURRENCY={recommended_concurrency}")
            print(f"MARKET_DATA_TIMEOUT=120")
            print("‚îÄ"*80)
            
    async def run_full_test_suite(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤."""
        print("="*80)
        print("üß™ BYBIT DATA FETCHING TEST SUITE")
        print("="*80)
        
        await self.initialize()
        
        # –¢–µ—Å—Ç 1: –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        await self.test_complete_data_structure('BTC/USDT:USDT')
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        await self.test_data_freshness('BTC/USDT:USDT')
        
        # –¢–µ—Å—Ç 3: –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        popular_symbols = [
            'BTC/USDT:USDT',
            'ETH/USDT:USDT',
            'SOL/USDT:USDT',
            'BNB/USDT:USDT',
            'XRP/USDT:USDT'
        ]
        await self.test_multiple_symbols_detailed(popular_symbols)
        
        # –¢–µ—Å—Ç 4: Rate limits
        await self.test_rate_limits()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        self.print_final_summary()
        
        # –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if self.exchange_client:
            await self.exchange_client.close()
            
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    tester = BybitDataTester()
    
    try:
        await tester.run_full_test_suite()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if tester.exchange_client:
            try:
                await tester.exchange_client.close()
            except:
                pass


if __name__ == '__main__':
    asyncio.run(main())
