#!/usr/bin/env python3
"""
–°–∏–º—É–ª—è—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã:
1. –£—Å–ø–µ—à–Ω—ã–π TP1
2. –£—Å–ø–µ—à–Ω—ã–π TP2  
3. –°—Ç–æ–ø-–ª–æ—Å—Å
4. –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
5. Add-on –ø–æ–∑–∏—Ü–∏–∏
"""

import asyncio
import aiohttp
import json
import time
import random
from datetime import datetime

class PriceSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã."""
    
    def __init__(self):
        self.base_price = 100.0
        self.current_price = 100.0
        self.positions = []
        self.scenarios = [
            {"name": "–£—Å–ø–µ—à–Ω—ã–π TP1", "target_change": 0.02, "duration": 60},
            {"name": "–£—Å–ø–µ—à–Ω—ã–π TP2", "target_change": 0.04, "duration": 120},
            {"name": "–°—Ç–æ–ø-–ª–æ—Å—Å", "target_change": -0.02, "duration": 30},
            {"name": "–¢—Ä–µ–π–ª–∏–Ω–≥", "target_change": 0.03, "duration": 90},
            {"name": "Add-on", "target_change": 0.01, "duration": 45},
        ]
    
    async def get_positions(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏."""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('http://localhost:8000/api/trading/positions') as response:
                    data = await response.json()
                    return data.get('positions', [])
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    async def simulate_scenario(self, scenario):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π."""
        print(f"\nüé≠ –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
        print(f"üéØ –¶–µ–ª–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {scenario['target_change']*100:.1f}%")
        print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {scenario['duration']} —Å–µ–∫—É–Ω–¥")
        
        start_time = time.time()
        target_price = self.current_price * (1 + scenario['target_change'])
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω–µ
        steps = scenario['duration'] // 5  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        price_step = (target_price - self.current_price) / steps
        
        for step in range(steps):
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
            noise = random.uniform(-0.001, 0.001)  # ¬±0.1% —à—É–º
            self.current_price += price_step + (self.current_price * noise)
            
            print(f"üìà –¶–µ–Ω–∞: {self.current_price:.4f} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {(self.current_price/self.base_price - 1)*100:.2f}%)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            positions = await self.get_positions()
            if positions:
                print(f"üíº –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
                for pos in positions:
                    pnl = self.calculate_pnl(pos)
                    print(f"  üìä {pos['symbol']}: PnL = {pnl:.2f}%")
            
            await asyncio.sleep(5)
        
        print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π '{scenario['name']}' –∑–∞–≤–µ—Ä—à–µ–Ω")
        print(f"üìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {self.current_price:.4f}")
    
    def calculate_pnl(self, position):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç PnL –ø–æ–∑–∏—Ü–∏–∏."""
        if position['side'] == 'long':
            return ((self.current_price - position['entry']) / position['entry']) * 100
        else:
            return ((position['entry'] - self.current_price) / position['entry']) * 100
    
    async def run_simulation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é."""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        initial_positions = await self.get_positions()
        if not initial_positions:
            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏")
            print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–≤–∏–∂–æ–∫ –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π")
            return
        
        print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {len(initial_positions)}")
        for pos in initial_positions:
            print(f"  üìà {pos['symbol']}: {pos['side']} {pos['qty']} @ {pos['entry']}")
            print(f"     SL: {pos['sl']}, TP: {pos.get('tp', 'N/A')}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        for scenario in self.scenarios:
            await self.simulate_scenario(scenario)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = await self.get_positions()
            if not positions:
                print("‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã - —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                break
            
            print(f"üíº –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
            await asyncio.sleep(10)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        final_positions = await self.get_positions()
        print(f"\nüèÅ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(final_positions)}")
        print(f"üìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {self.current_price:.4f}")
        print(f"üìä –û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {(self.current_price/self.base_price - 1)*100:.2f}%")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    simulator = PriceSimulator()
    await simulator.run_simulation()

if __name__ == "__main__":
    asyncio.run(main())
