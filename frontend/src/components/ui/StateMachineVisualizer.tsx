/**
 * State Machine Visualizer Component
 * 
 * –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
 */

import React, { useState, useEffect } from 'react';
import { Card, Badge, ProgressBar, Row, Col, Alert } from 'react-bootstrap';
import { useQuery } from '@tanstack/react-query';
import { monitoringApi } from '../../api/endpoints';

interface StateTransition {
  from_state: string;
  to_state: string;
  reason: string;
  timestamp: number;
  metadata?: Record<string, any>;
}

interface StateMachineStatus {
  current_state: string;
  previous_state?: string;
  is_terminal: boolean;
  is_error: boolean;
  is_trading_active: boolean;
  valid_next_states: string[];
  transition_count: number;
}

interface StateMachineVisualizerProps {
  sessionId?: string;
  autoRefresh?: boolean;
  showHistory?: boolean;
  compact?: boolean;
}

const STATE_COLORS: Record<string, string> = {
  idle: 'secondary',
  initializing: 'info',
  scanning: 'primary',
  level_building: 'warning',
  signal_wait: 'info',
  sizing: 'warning',
  execution: 'success',
  managing: 'success',
  paused: 'secondary',
  error: 'danger',
  emergency: 'danger',
  stopped: 'dark'
};

const STATE_ICONS: Record<string, string> = {
  idle: '‚è∏Ô∏è',
  initializing: 'üîß',
  scanning: 'üìä',
  level_building: 'üìè',
  signal_wait: '‚è≥',
  sizing: 'üìê',
  execution: '‚ö°',
  managing: 'üéØ',
  paused: '‚è∏Ô∏è',
  error: '‚ùå',
  emergency: 'üö®',
  stopped: '‚èπÔ∏è'
};

const STATE_DESCRIPTIONS: Record<string, string> = {
  idle: '–°–∏—Å—Ç–µ–º–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è',
  initializing: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
  scanning: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',
  level_building: '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è',
  signal_wait: '–û–∂–∏–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤',
  sizing: '–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π',
  execution: '–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤',
  managing: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏',
  paused: '–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
  error: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ',
  emergency: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ',
  stopped: '–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
};

export const StateMachineVisualizer: React.FC<StateMachineVisualizerProps> = ({
  sessionId,
  autoRefresh = true,
  showHistory = true,
  compact = false
}) => {
  const [selectedTransition, setSelectedTransition] = useState<StateTransition | null>(null);

  // Query –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ state machine
  const { data: stateStatus, isLoading: statusLoading, error: statusError } = useQuery({
    queryKey: ['state-machine', 'status', sessionId],
    queryFn: () => monitoringApi.getStateMachineStatus(sessionId),
    refetchInterval: autoRefresh ? 2000 : false,
    retry: 3,
    retryDelay: 1000
  });

  // Query –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
  const { data: transitions = [], isLoading: historyLoading } = useQuery({
    queryKey: ['state-machine', 'transitions', sessionId],
    queryFn: () => monitoringApi.getStateTransitions(sessionId, 20),
    enabled: showHistory,
    refetchInterval: autoRefresh ? 2000 : false,
    retry: 3,
    retryDelay: 1000
  });

  const getStateBadge = (state: string) => {
    const color = STATE_COLORS[state] || 'secondary';
    const icon = STATE_ICONS[state] || '‚ùì';
    return (
      <Badge bg={color} className="fs-6 px-3 py-2">
        {icon} {state.toUpperCase()}
      </Badge>
    );
  };

  const formatTimestamp = (timestamp: number) => {
    return new Date(timestamp).toLocaleTimeString('ru-RU');
  };

  const getTransitionDirection = (from: string, to: string) => {
    if (from === to) return 'üîÑ';
    if (['error', 'emergency'].includes(to)) return '‚ùå';
    if (['execution', 'managing'].includes(to)) return '‚úÖ';
    if (['scanning', 'level_building', 'signal_wait'].includes(to)) return 'üîÑ';
    return '‚û°Ô∏è';
  };

  if (statusLoading) {
    return (
      <Card>
        <Card.Body className="text-center">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </div>
          <p className="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...</p>
        </Card.Body>
      </Card>
    );
  }

  if (statusError) {
    return (
      <Alert variant="danger">
        <Alert.Heading>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è</Alert.Heading>
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã.</p>
        <small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.</small>
      </Alert>
    );
  }

  if (!stateStatus) {
    return (
      <Alert variant="warning">
        <Alert.Heading>–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</Alert.Heading>
        <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.</p>
      </Alert>
    );
  }

  return (
    <div>
      {/* –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      <Card className="mb-3">
        <Card.Header>
          <h5 className="mb-0">
            {STATE_ICONS[stateStatus.current_state]} –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
          </h5>
        </Card.Header>
        <Card.Body>
          <Row className="align-items-center">
            <Col md={compact ? 12 : 6}>
              <div className="d-flex align-items-center mb-2">
                <span className="me-3">–°–æ—Å—Ç–æ—è–Ω–∏–µ:</span>
                {getStateBadge(stateStatus.current_state)}
              </div>
              
              {stateStatus.previous_state && (
                <div className="d-flex align-items-center mb-2">
                  <span className="me-3">–ü—Ä–µ–¥—ã–¥—É—â–µ–µ:</span>
                  <Badge bg="outline-secondary" className="fs-6 px-2 py-1">
                    {STATE_ICONS[stateStatus.previous_state]} {stateStatus.previous_state.toUpperCase()}
                  </Badge>
                </div>
              )}

              <div className="text-muted small">
                {STATE_DESCRIPTIONS[stateStatus.current_state]}
              </div>
            </Col>

            {!compact && (
              <Col md={6}>
                <div className="row text-center">
                  <div className="col-4">
                    <div className="h6 mb-0">{stateStatus.transition_count}</div>
                    <small className="text-muted">–ü–µ—Ä–µ—Ö–æ–¥–æ–≤</small>
                  </div>
                  <div className="col-4">
                    <div className="h6 mb-0">
                      {stateStatus.is_trading_active ? '‚úÖ' : '‚ùå'}
                    </div>
                    <small className="text-muted">–¢–æ—Ä–≥–æ–≤–ª—è</small>
                  </div>
                  <div className="col-4">
                    <div className="h6 mb-0">
                      {stateStatus.is_error ? '‚ùå' : '‚úÖ'}
                    </div>
                    <small className="text-muted">–°—Ç–∞—Ç—É—Å</small>
                  </div>
                </div>
              </Col>
            )}
          </Row>

          {/* –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
          {stateStatus.valid_next_states.length > 0 && (
            <div className="mt-3">
              <small className="text-muted">–í–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã:</small>
              <div className="mt-1">
                {stateStatus.valid_next_states.map((state, index) => (
                  <Badge 
                    key={index} 
                    bg="outline-primary" 
                    className="me-1 mb-1"
                  >
                    {STATE_ICONS[state]} {state}
                  </Badge>
                ))}
              </div>
            </div>
          )}
        </Card.Body>
      </Card>

      {/* –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ */}
      {showHistory && transitions.length > 0 && (
        <Card>
          <Card.Header>
            <h6 className="mb-0">–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π</h6>
          </Card.Header>
          <Card.Body className="p-0">
            <div className="list-group list-group-flush">
              {transitions.slice(0, compact ? 5 : 10).map((transition, index) => (
                <div
                  key={index}
                  className={`list-group-item list-group-item-action ${
                    selectedTransition === transition ? 'active' : ''
                  }`}
                  onClick={() => setSelectedTransition(
                    selectedTransition === transition ? null : transition
                  )}
                  style={{ cursor: 'pointer' }}
                >
                  <div className="d-flex justify-content-between align-items-center">
                    <div className="d-flex align-items-center">
                      <span className="me-2">
                        {getTransitionDirection(transition.from_state, transition.to_state)}
                      </span>
                      <Badge bg={STATE_COLORS[transition.from_state]} className="me-2">
                        {transition.from_state}
                      </Badge>
                      <span className="me-2">‚Üí</span>
                      <Badge bg={STATE_COLORS[transition.to_state]}>
                        {transition.to_state}
                      </Badge>
                    </div>
                    <small className="text-muted">
                      {formatTimestamp(transition.timestamp)}
                    </small>
                  </div>
                  
                  {selectedTransition === transition && (
                    <div className="mt-2 pt-2 border-top">
                      <div className="small">
                        <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> {transition.reason}
                      </div>
                      {transition.metadata && Object.keys(transition.metadata).length > 0 && (
                        <div className="small mt-1">
                          <strong>–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:</strong>
                          <pre className="mt-1 mb-0 small">
                            {JSON.stringify(transition.metadata, null, 2)}
                          </pre>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </Card.Body>
        </Card>
      )}

      {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ */}
      {showHistory && transitions.length === 0 && !historyLoading && (
        <Card>
          <Card.Body className="text-center text-muted">
            <div className="mb-2">üìù</div>
            <div>–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø—É—Å—Ç–∞</div>
            <small>–ü–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</small>
          </Card.Body>
        </Card>
      )}
    </div>
  );
};

export default StateMachineVisualizer;
