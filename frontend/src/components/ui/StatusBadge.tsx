/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ –±–µ–π–¥–∂–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º UX
 */

import React from 'react';
import { Badge } from 'react-bootstrap';

export interface StatusBadgeProps {
  status: string;
  variant?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
  size?: 'sm' | 'lg';
  className?: string;
  showIcon?: boolean;
}

interface StatusConfig {
  variant: string;
  icon: string;
  description: string;
}

const getStatusConfig = (status: string): StatusConfig => {
  const statusLower = status.toLowerCase();
  
  // Engine states
  if (statusLower === 'idle') {
    return { variant: 'secondary', icon: '‚è∏Ô∏è', description: '–î–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' };
  }
  if (statusLower === 'scanning') {
    return { variant: 'info', icon: 'üîç', description: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞' };
  }
  if (statusLower === 'signal_wait') {
    return { variant: 'warning', icon: '‚è≥', description: '–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤' };
  }
  if (statusLower === 'execution') {
    return { variant: 'primary', icon: '‚ö°', description: '–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤' };
  }
  if (statusLower === 'managing') {
    return { variant: 'success', icon: 'üìä', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏' };
  }
  if (statusLower === 'error') {
    return { variant: 'danger', icon: '‚ùå', description: '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã' };
  }
  if (statusLower === 'emergency') {
    return { variant: 'danger', icon: 'üö®', description: '–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞' };
  }
  
  // Connection states
  if (statusLower === 'connected') {
    return { variant: 'success', icon: 'üü¢', description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' };
  }
  if (statusLower === 'disconnected') {
    return { variant: 'danger', icon: 'üî¥', description: '–û—Ç–∫–ª—é—á–µ–Ω–æ' };
  }
  if (statusLower === 'connecting') {
    return { variant: 'warning', icon: 'üü°', description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' };
  }
  
  // Trading states
  if (statusLower === 'paper') {
    return { variant: 'info', icon: 'üìÑ', description: '–ë—É–º–∞–∂–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è' };
  }
  if (statusLower === 'live') {
    return { variant: 'success', icon: 'üí∞', description: '–†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è' };
  }
  
  // Generic states
  if (statusLower.includes('running') || statusLower.includes('active') || statusLower.includes('success')) {
    return { variant: 'success', icon: '‚úÖ', description: '–ê–∫—Ç–∏–≤–Ω–æ' };
  }
  if (statusLower.includes('stopped') || statusLower.includes('inactive') || statusLower.includes('error')) {
    return { variant: 'danger', icon: '‚ùå', description: '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' };
  }
  if (statusLower.includes('pending') || statusLower.includes('waiting') || statusLower.includes('loading')) {
    return { variant: 'warning', icon: '‚è≥', description: '–û–∂–∏–¥–∞–Ω–∏–µ' };
  }
  if (statusLower.includes('paused')) {
    return { variant: 'secondary', icon: '‚è∏Ô∏è', description: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' };
  }
  
  return { variant: 'primary', icon: '‚ÑπÔ∏è', description: status };
};

export const StatusBadge: React.FC<StatusBadgeProps> = ({
  status,
  variant,
  size = 'sm',
  className = '',
  showIcon = true,
}) => {
  const statusConfig = getStatusConfig(status);
  const badgeVariant = variant || statusConfig.variant;
  
  return (
    <Badge
      bg={badgeVariant}
      className={`${size === 'lg' ? 'fs-6' : ''} ${className}`}
      title={statusConfig.description}
    >
      {showIcon && statusConfig.icon} {status}
    </Badge>
  );
};


