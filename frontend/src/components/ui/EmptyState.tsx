/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
 */

import React from 'react';
import { Card, Button } from 'react-bootstrap';

export interface EmptyStateProps {
  icon: string;
  title: string;
  description: string;
  actionText?: string;
  onAction?: () => void;
  variant?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info';
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

export const EmptyState: React.FC<EmptyStateProps> = ({
  icon,
  title,
  description,
  actionText,
  onAction,
  variant = 'secondary',
  size = 'md',
  className = '',
}) => {
  const iconSize = size === 'sm' ? '2rem' : size === 'lg' ? '4rem' : '3rem';
  
  return (
    <Card className={`text-center border-0 bg-light ${className}`}>
      <Card.Body className="py-5">
        <div 
          className="mb-3"
          style={{ fontSize: iconSize }}
        >
          {icon}
        </div>
        <Card.Title className="h5 text-muted mb-2">
          {title}
        </Card.Title>
        <Card.Text className="text-muted mb-3">
          {description}
        </Card.Text>
        {actionText && onAction && (
          <Button 
            variant={variant}
            onClick={onAction}
            size={size === 'sm' ? 'sm' : 'md'}
          >
            {actionText}
          </Button>
        )}
      </Card.Body>
    </Card>
  );
};

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
export const EmptyPositions: React.FC<{ onStartTrading?: () => void }> = ({ onStartTrading }) => (
  <EmptyState
    icon="üìä"
    title="–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
    description="–î–≤–∏–∂–æ–∫ –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω –∏ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫."
    actionText="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é"
    onAction={onStartTrading}
    variant="primary"
  />
);

export const EmptyOrders: React.FC<{ onViewScanner?: () => void }> = ({ onViewScanner }) => (
  <EmptyState
    icon="üìã"
    title="–ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤"
    description="–û—Ä–¥–µ—Ä–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –¥–≤–∏–∂–æ–∫ –Ω–∞—á–Ω–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–∞–Ω–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."
    actionText="–û—Ç–∫—Ä—ã—Ç—å —Å–∫–∞–Ω–µ—Ä"
    onAction={onViewScanner}
    variant="info"
  />
);

export const EmptyScanResults: React.FC<{ onStartScan?: () => void }> = ({ onStartScan }) => (
  <EmptyState
    icon="üîç"
    title="–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    description="–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."
    actionText="–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    onAction={onStartScan}
    variant="primary"
  />
);

export const EmptyLogs: React.FC<{ onRefresh?: () => void }> = ({ onRefresh }) => (
  <EmptyState
    icon="üìù"
    title="–ù–µ—Ç –ª–æ–≥–æ–≤"
    description="–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å."
    actionText="–û–±–Ω–æ–≤–∏—Ç—å"
    onAction={onRefresh}
    variant="secondary"
  />
);
