#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting –¥–ª—è Bybit API.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –†–∞–±–æ—Ç—É BybitRateLimiter —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
2. –û–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ X-Bapi-Limit-*
3. Exponential backoff –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å ExchangeClient
"""

import asyncio
import time
import logging
from typing import List
import os
import sys

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from breakout_bot.config.settings import SystemConfig
from breakout_bot.exchange.exchange_client import ExchangeClient
from breakout_bot.exchange.rate_limiter import BybitRateLimiter, EndpointCategory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class BybitRateLimiterTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è BybitRateLimiter."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞."""
        self.results = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Bybit
        self.config = SystemConfig()
        self.config.exchange = 'bybit'
        self.config.trading_mode = 'paper'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º paper mode –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        # –°–æ–∑–¥–∞–Ω–∏–µ exchange client
        self.exchange_client = ExchangeClient(self.config)

    async def test_rate_limiter_initialization(self):
        """–¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rate limiter."""
        logger.info("üß™ –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BybitRateLimiter")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ rate limiter —Å–æ–∑–¥–∞–Ω –¥–ª—è Bybit
            assert self.exchange_client.rate_limiter is not None, "RateLimiter –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –¥–ª—è Bybit"
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            status = self.exchange_client.rate_limiter.get_status()
            assert isinstance(status, dict), "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
            assert 'category_rates' in status, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å category_rates"
            assert 'ip_requests_5s' in status, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—á–µ—Ç—á–∏–∫ IP –∑–∞–ø—Ä–æ—Å–æ–≤"
            
            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
            
            self.results['initialization'] = 'PASSED'
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            self.results['initialization'] = f'FAILED: {e}'

    async def test_single_request_rate_limiting(self):
        """–¢–µ—Å—Ç 2: Rate limiting –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        logger.info("üß™ –¢–µ—Å—Ç 2: Rate limiting –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        try:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            test_symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT']
            request_times = []
            
            for symbol in test_symbols:
                start_time = time.time()
                
                # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ exchange client
                ticker = await self.exchange_client.fetch_ticker(symbol)
                
                end_time = time.time()
                request_time = end_time - start_time
                request_times.append(request_time)
                
                logger.info(f"üìà {symbol}: {request_time:.3f}s, ticker: {bool(ticker)}")
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å rate limiter
                status = self.exchange_client.rate_limiter.get_status()
                logger.debug(f"Rate limiter status: {status['category_rates']}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.1)
            
            avg_request_time = sum(request_times) / len(request_times)
            logger.info(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {avg_request_time:.3f}s")
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å
            assert all(t > 0 for t in request_times), "–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è"
            assert avg_request_time < 5.0, "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 —Å–µ–∫—É–Ω–¥"
            
            logger.info("‚úÖ –û–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.results['single_requests'] = 'PASSED'
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö: {e}")
            self.results['single_requests'] = f'FAILED: {e}'

    async def test_burst_requests(self):
        """–¢–µ—Å—Ç 3: Burst –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤."""
        logger.info("üß™ –¢–µ—Å—Ç 3: Burst –∑–∞–ø—Ä–æ—Å—ã")
        
        try:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
            symbols = ['BTCUSDT'] * 15  # 15 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            
            start_time = time.time()
            successful_requests = 0
            rate_limited_requests = 0
            
            for i, symbol in enumerate(symbols):
                try:
                    ticker = await self.exchange_client.fetch_ticker(symbol)
                    if ticker:
                        successful_requests += 1
                    logger.debug(f"–ó–∞–ø—Ä–æ—Å {i+1}: —É—Å–ø–µ—à–Ω—ã–π")
                    
                except Exception as e:
                    if 'rate limit' in str(e).lower() or 'too many' in str(e).lower():
                        rate_limited_requests += 1
                        logger.info(f"–ó–∞–ø—Ä–æ—Å {i+1}: rate limited")
                    else:
                        logger.warning(f"–ó–∞–ø—Ä–æ—Å {i+1}: –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - {e}")
            
            end_time = time.time()
            total_time = end_time - start_time
            requests_per_second = len(symbols) / total_time
            
            logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(symbols)}")
            logger.info(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö: {successful_requests}")
            logger.info(f"üìä Rate limited: {rate_limited_requests}")
            logger.info(f"üìä –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s")
            logger.info(f"üìä –°–∫–æ—Ä–æ—Å—Ç—å: {requests_per_second:.2f} req/s")
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            status = self.exchange_client.rate_limiter.get_status()
            logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å rate limiter: {status}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            assert successful_requests > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
            assert requests_per_second < 50, "–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ (< 50 req/s)"
            
            if rate_limited_requests > 0:
                logger.info("‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±—ã–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")
            else:
                logger.info("‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—à–ª–∏ - –ª–∏–º–∏—Ç—ã –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω—ã")
            
            self.results['burst_requests'] = 'PASSED'
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ burst –∑–∞–ø—Ä–æ—Å–∞—Ö: {e}")
            self.results['burst_requests'] = f'FAILED: {e}'

    async def test_different_endpoints(self):
        """–¢–µ—Å—Ç 4: –†–∞–∑–Ω—ã–µ endpoints —Å —Ä–∞–∑–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏."""
        logger.info("üß™ –¢–µ—Å—Ç 4: –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã endpoints")
        
        try:
            symbol = 'BTCUSDT'
            
            # –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
            endpoints_tested = []
            
            # Market data
            try:
                ticker = await self.exchange_client.fetch_ticker(symbol)
                endpoints_tested.append(('ticker', 'market_data', bool(ticker)))
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.warning(f"Ticker request failed: {e}")
                endpoints_tested.append(('ticker', 'market_data', False))
            
            # Order book
            try:
                order_book = await self.exchange_client.fetch_order_book(symbol, 10)
                endpoints_tested.append(('orderbook', 'market_data', bool(order_book)))
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.warning(f"Order book request failed: {e}")
                endpoints_tested.append(('orderbook', 'market_data', False))
            
            # OHLCV
            try:
                ohlcv = await self.exchange_client.fetch_ohlcv(symbol, '5m', 10)
                endpoints_tested.append(('ohlcv', 'market_data', bool(ohlcv)))
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.warning(f"OHLCV request failed: {e}")
                endpoints_tested.append(('ohlcv', 'market_data', False))
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for endpoint, category, success in endpoints_tested:
                status_icon = "‚úÖ" if success else "‚ùå"
                logger.info(f"{status_icon} {endpoint} ({category}): {success}")
            
            successful_endpoints = sum(1 for _, _, success in endpoints_tested if success)
            
            assert successful_endpoints > 0, "–•–æ—Ç—è –±—ã –æ–¥–∏–Ω endpoint –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
            
            logger.info(f"‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(endpoints_tested)} endpoints, —É—Å–ø–µ—à–Ω—ã—Ö: {successful_endpoints}")
            self.results['different_endpoints'] = 'PASSED'
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ endpoints: {e}")
            self.results['different_endpoints'] = f'FAILED: {e}'

    async def test_rate_limiter_status_monitoring(self):
        """–¢–µ—Å—Ç 5: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ rate limiter."""
        logger.info("üß™ –¢–µ—Å—Ç 5: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞")
        
        try:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            for i in range(5):
                await self.exchange_client.fetch_ticker('BTCUSDT')
                await asyncio.sleep(0.2)
            
            # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            status = self.exchange_client.get_rate_limiter_status()
            
            assert status is not None, "–°—Ç–∞—Ç—É—Å rate limiter –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç—É—Å–∞
            required_keys = ['category_rates', 'ip_requests_5s', 'ip_limit']
            for key in required_keys:
                assert key in status, f"–ö–ª—é—á '{key}' –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ"
            
            logger.info("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å rate limiter:")
            for key, value in status.items():
                logger.info(f"  {key}: {value}")
            
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.results['status_monitoring'] = 'PASSED'
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self.results['status_monitoring'] = f'FAILED: {e}'

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ BybitRateLimiter")
        logger.info("=" * 60)
        
        tests = [
            self.test_rate_limiter_initialization,
            self.test_single_request_rate_limiting,
            self.test_burst_requests,
            self.test_different_endpoints,
            self.test_rate_limiter_status_monitoring
        ]
        
        for test in tests:
            try:
                await test()
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
                self.results[test.__name__] = f'CRITICAL_ERROR: {e}'
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("=" * 60)
        logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 60)
        
        passed_tests = 0
        total_tests = len(self.results)
        
        for test_name, result in self.results.items():
            if result == 'PASSED':
                logger.info(f"‚úÖ {test_name}: {result}")
                passed_tests += 1
            else:
                logger.error(f"‚ùå {test_name}: {result}")
        
        logger.info("=" * 60)
        logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        if passed_tests == total_tests:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! Rate limiting –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        
        return self.results


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        tester = BybitRateLimiterTester()
        results = await tester.run_all_tests()
        return results
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        return {"main": f"CRITICAL_ERROR: {e}"}


if __name__ == "__main__":
    asyncio.run(main())
