#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫.
"""

import asyncio
import sys
import time
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from breakout_bot.core.engine import OptimizedOrchestraEngine
from breakout_bot.core.state_machine import TradingState


async def test_pipeline_flow():
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞."""
    print("\n" + "="*80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–¢–û–ö–ê –ü–ê–ô–ü–õ–ê–ô–ù–ê")
    print("="*80 + "\n")
    
    engine = None
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞...")
        engine = OptimizedOrchestraEngine("breakout_v1")
        await engine.initialize()
        print("‚úÖ –î–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n")
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        state_transitions = []
        transition_times = []
        
        def track_transition(transition):
            state_transitions.append((transition.from_state, transition.to_state))
            transition_times.append(time.time())
            print(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥: {transition.from_state.value} ‚Üí {transition.to_state.value}")
        
        engine.state_machine._notify_callback = track_transition
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...\n")
        start_time = time.time()
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        async def run_limited_cycle():
            engine.running = True
            task = asyncio.create_task(engine._main_trading_loop())
            await asyncio.sleep(30)  # –î–∞—Ç—å 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É
            engine.running = False
            await task
        
        await run_limited_cycle()
        
        total_time = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê")
        print("="*80 + "\n")
        
        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_time:.2f}s")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {len(state_transitions)}\n")
        
        if state_transitions:
            print("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:")
            for i, (from_state, to_state) in enumerate(state_transitions, 1):
                if i < len(transition_times):
                    time_diff = transition_times[i] - transition_times[i-1] if i > 0 else 0
                    print(f"  {i}. {from_state.value:20} ‚Üí {to_state.value:20} ({time_diff:.3f}s)")
                else:
                    print(f"  {i}. {from_state.value:20} ‚Üí {to_state.value:20}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–∞–π–ø–ª–∞–π–Ω –ø—Ä–æ—à–µ–ª –¥–∞–ª—å—à–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        states_visited = set(to_state for _, to_state in state_transitions)
        
        print("\n–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
        for state in [TradingState.SCANNING, TradingState.LEVEL_BUILDING, 
                      TradingState.SIGNAL_WAIT, TradingState.SIZING, 
                      TradingState.EXECUTION]:
            visited = "‚úÖ" if state in states_visited else "‚ùå"
            print(f"  {visited} {state.value}")
        
        # –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—Ö–∞
        print("\n" + "="*80)
        if TradingState.SIGNAL_WAIT in states_visited:
            print("‚úÖ –£–°–ü–ï–•: –ü–∞–π–ø–ª–∞–π–Ω –ø—Ä–æ—à–µ–ª –¥–∞–ª—å—à–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
            if TradingState.SIZING in states_visited:
                print("‚úÖ –û–¢–õ–ò–ß–ù–û: –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SIZING!")
        else:
            print("‚ùå –ü–†–û–í–ê–õ: –ü–∞–π–ø–ª–∞–π–Ω –∑–∞—Å—Ç—Ä—è–ª –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
        print("="*80 + "\n")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if engine:
            await engine.stop()


if __name__ == "__main__":
    try:
        asyncio.run(test_pipeline_flow())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
