#!/usr/bin/env python3
"""
–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê –ü–û–ó–ò–¶–ò–ò

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. ‚úÖ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
2. ‚úÖ Position management
3. ‚úÖ TP hit closure
4. ‚úÖ SL hit closure
5. ‚úÖ Trailing stop
6. ‚úÖ Manual closure
7. ‚úÖ Emergency exit

–ü–æ–¥—Ö–æ–¥:
- –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å forced signal
- –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å exit logic
"""

import asyncio
import sys
from pathlib import Path
from decimal import Decimal
from datetime import datetime, timezone

sys.path.insert(0, str(Path(__file__).parent))

from breakout_bot.core.engine import OptimizedOrchestraEngine
from breakout_bot.core.state_machine import TradingState
from breakout_bot.data.models import Signal, MarketData
from breakout_bot.data.models import Position


class PositionLifecycleTest:
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    
    def __init__(self):
        self.engine = None
        self.test_results = {
            'position_open': False,
            'tp_closure': False,
            'sl_closure': False,
            'manual_closure': False,
            'trailing_stop': False,
            'error_recovery': False
        }
        
    async def setup_engine(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞"""
        print("\n" + "="*80)
        print("üß™ POSITION LIFECYCLE TEST")
        print("="*80)
        print("\nüìã –¢–µ—Å—Ç—ã:")
        print("   1. ‚úÖ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
        print("   2. üéØ TP Hit Closure")
        print("   3. üõë SL Hit Closure")
        print("   4. üìà Trailing Stop")
        print("   5. ‚úã Manual Closure")
        print("   6. üö® Emergency Exit")
        print()
        
        print("‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞...")
        self.engine = OptimizedOrchestraEngine(preset_name="breakout_v1_working")
        
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        await self.engine.initialize()
        
        print("‚úÖ –î–≤–∏–∂–æ–∫ –≥–æ—Ç–æ–≤!")
        print(f"   Capital: ${self.engine.starting_equity:,.2f}")
        print()
        
    async def wait_for_scanning(self):
        """–ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        timeout = 60
        start = asyncio.get_event_loop().time()
        
        while True:
            await asyncio.sleep(1)
            
            if asyncio.get_event_loop().time() - start > timeout:
                raise TimeoutError("Scanning timeout")
                
            current_state = self.engine.state_machine.current_state
            
            if current_state == TradingState.SIGNAL_WAIT:
                print("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                break
            elif current_state in [TradingState.ERROR, TradingState.STOPPED]:
                raise Exception(f"–î–≤–∏–∂–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
                
        await asyncio.sleep(2)
        
    async def open_test_position(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        print("\n" + "="*80)
        print("üìä –¢–ï–°–¢ 1: –û–¢–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò")
        print("="*80)
        
        # –ü–æ–ª—É—á–∞–µ–º scan results
        scan_results = []
        if hasattr(self.engine, 'scanning_manager'):
            sm = self.engine.scanning_manager
            if hasattr(sm, 'last_scan_results') and sm.last_scan_results:
                scan_results = sm.last_scan_results
                
        if not scan_results:
            raise Exception("–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
            
        # –í—ã–±–∏—Ä–∞–µ–º BTC
        best_candidate = max(scan_results, key=lambda x: x.market_data.volume_24h_usd)
        symbol = best_candidate.symbol
        
        print(f"\nüéØ –í—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤: {symbol}")
        print(f"   Volume 24h: ${best_candidate.market_data.volume_24h_usd:,.0f}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        exchange = self.engine.exchange_client
        ticker = await exchange.fetch_ticker(symbol)
        current_price = Decimal(str(ticker['last']))
        
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        forced_signal = Signal(
            id=f"test_{symbol}_{datetime.now(timezone.utc).timestamp()}",
            symbol=symbol,
            direction="long",
            entry_price=current_price,
            stop_loss=current_price * Decimal("0.98"),  # -2%
            take_profit=current_price * Decimal("1.04"),  # +4%
            confidence=Decimal("0.85"),
            market_data=best_candidate.market_data,
            strategy="test_lifecycle",
            timestamp=datetime.now(timezone.utc)
        )
        
        print(f"\nüìù –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω:")
        print(f"   Entry: ${forced_signal.entry_price}")
        print(f"   Stop Loss: ${forced_signal.stop_loss} (-2%)")
        print(f"   Take Profit: ${forced_signal.take_profit} (+4%)")
        
        # –ò–Ω–∂–µ–∫—Ç–∏–º —Å–∏–≥–Ω–∞–ª
        signal_manager = self.engine.signal_manager
        await signal_manager.add_signals([forced_signal])
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ SIZING
        state_machine = self.engine.state_machine
        state_machine.transition_to(
            TradingState.SIZING,
            "Test signal injected - moving to sizing"
        )
        
        print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏...")
        
        # –ñ–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
        timeout = 30
        start = asyncio.get_event_loop().time()
        position_opened = False
        
        while asyncio.get_event_loop().time() - start < timeout:
            await asyncio.sleep(0.5)
            
            pm = self.engine.position_manager
            active_positions = await pm.get_active_positions()
            
            if active_positions:
                position = active_positions[0]
                position_opened = True
                
                print("\n‚úÖ –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê!")
                print(f"   Symbol: {position.symbol}")
                print(f"   Side: {position.side}")
                print(f"   Size: {position.qty}")
                print(f"   Entry: ${position.entry:.2f}")
                print(f"   Stop: ${position.sl:.2f}")
                print(f"   Target: ${position.tp:.2f}" if position.tp else "   Target: None")
                
                self.test_results['position_open'] = True
                return position
                
        if not position_opened:
            raise Exception("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
            
    async def test_tp_closure(self, position: Position):
        """–¢–µ—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ TP"""
        print("\n" + "="*80)
        print("üéØ –¢–ï–°–¢ 2: TP HIT CLOSURE")
        print("="*80)
        
        if not position.tp:
            print("‚ö†Ô∏è  –ü–æ–∑–∏—Ü–∏—è –±–µ–∑ TP, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            self.test_results['tp_closure'] = None
            return
            
        print(f"\nüìä –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:")
        print(f"   Entry: ${position.entry:.2f}")
        print(f"   Current: ${position.entry:.2f}")  
        print(f"   Target: ${position.tp:.2f}")
        print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ TP: {((position.tp / position.entry - 1) * 100):.2f}%")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫ TP
        print(f"\nüîß –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫ TP...")
        
        pm = self.engine.position_manager
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –Ω–æ–≤–æ–π —Ü–µ–Ω–æ–π –±–ª–∏–∑–∫–æ–π –∫ TP
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ü–µ–Ω—É —á—É—Ç—å –≤—ã—à–µ TP
        simulated_price = float(position.tp) * 1.001 if position.tp else position.entry * 1.05
        
        print(f"   –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${simulated_price:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ TP
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ position_manager
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ TP closure...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ check_exit_conditions
        if hasattr(pm, 'check_exit_conditions'):
            print("   ‚úÖ –ú–µ—Ç–æ–¥ check_exit_conditions –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º fake market data —Å —Ü–µ–Ω–æ–π = TP
            fake_market_data = MarketData(
                symbol=position.symbol,
                price=simulated_price,
                volume_24h_usd=1000000,
                bid=simulated_price * Decimal("0.999"),
                ask=simulated_price * Decimal("1.001"),
                bid_size=100,
                ask_size=100,
                timestamp=datetime.now(timezone.utc)
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º exit conditions
            should_exit, reason = pm.check_exit_conditions(position, fake_market_data)
            
            if should_exit:
                print(f"   ‚úÖ TP HIT DETECTED!")
                print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                self.test_results['tp_closure'] = True
            else:
                print(f"   ‚ùå TP –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                self.test_results['tp_closure'] = False
        else:
            print("   ‚ö†Ô∏è  –ú–µ—Ç–æ–¥ check_exit_conditions –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("   –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
            
            # –ò—â–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
            methods = [m for m in dir(pm) if not m.startswith('_')]
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {', '.join(methods[:10])}...")
            
            self.test_results['tp_closure'] = None
            
    async def test_sl_closure(self, position: Position):
        """–¢–µ—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ SL"""
        print("\n" + "="*80)
        print("üõë –¢–ï–°–¢ 3: SL HIT CLOSURE")
        print("="*80)
        
        print(f"\nüìä –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:")
        print(f"   Entry: ${position.entry:.2f}")
        print(f"   Stop: ${position.sl:.2f}")
        print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ SL: {((position.sl / position.entry - 1) * 100):.2f}%")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫ SL
        print(f"\nüîß –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫ SL...")
        
        pm = self.engine.position_manager
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –Ω–æ–≤–æ–π —Ü–µ–Ω–æ–π –±–ª–∏–∑–∫–æ–π –∫ SL
        simulated_price = position.sl * Decimal("0.999")  # –ß—É—Ç—å –Ω–∏–∂–µ SL
        
        print(f"   –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${simulated_price:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ SL
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ SL closure...")
        
        if hasattr(pm, 'check_exit_conditions'):
            print("   ‚úÖ –ú–µ—Ç–æ–¥ check_exit_conditions –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º fake market data —Å —Ü–µ–Ω–æ–π = SL
            fake_market_data = MarketData(
                symbol=position.symbol,
                price=simulated_price,
                volume_24h_usd=1000000,
                bid=simulated_price * Decimal("0.999"),
                ask=simulated_price * Decimal("1.001"),
                bid_size=100,
                ask_size=100,
                timestamp=datetime.now(timezone.utc)
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º exit conditions
            should_exit, reason = pm.check_exit_conditions(position, fake_market_data)
            
            if should_exit:
                print(f"   ‚úÖ SL HIT DETECTED!")
                print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                self.test_results['sl_closure'] = True
            else:
                print(f"   ‚ùå SL –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                self.test_results['sl_closure'] = False
        else:
            print("   ‚ö†Ô∏è  –ú–µ—Ç–æ–¥ check_exit_conditions –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.test_results['sl_closure'] = None
            
    async def test_manual_closure(self, position: Position):
        """–¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        print("\n" + "="*80)
        print("‚úã –¢–ï–°–¢ 4: MANUAL CLOSURE")
        print("="*80)
        
        pm = self.engine.position_manager
        
        print(f"\nüìä –ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º:")
        print(f"   ID: {position.id}")
        print(f"   Symbol: {position.symbol}")
        print(f"   Size: {position.qty}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ close_position
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è...")
        
        close_methods = [m for m in dir(pm) if 'close' in m.lower() and not m.startswith('_')]
        
        if close_methods:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –º–µ—Ç–æ–¥—ã: {', '.join(close_methods)}")
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å
            if hasattr(pm, 'close_position'):
                print("\n   –í—ã–∑—ã–≤–∞–µ–º close_position()...")
                try:
                    await pm.close_position(position.id, "Manual test closure")
                    print("   ‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –≤—Ä—É—á–Ω—É—é!")
                    self.test_results['manual_closure'] = True
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
                    self.test_results['manual_closure'] = False
            else:
                print("   ‚ö†Ô∏è  –ú–µ—Ç–æ–¥ close_position –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.test_results['manual_closure'] = None
        else:
            print("   ‚ö†Ô∏è  –ú–µ—Ç–æ–¥—ã –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã PM: {[m for m in dir(pm) if not m.startswith('_')][:10]}...")
            self.test_results['manual_closure'] = None
            
    async def test_trailing_stop(self, position: Position):
        """–¢–µ—Å—Ç trailing stop"""
        print("\n" + "="*80)
        print("üìà –¢–ï–°–¢ 5: TRAILING STOP")
        print("="*80)
        
        pm = self.engine.position_manager
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ trailing stop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        trailing_methods = [m for m in dir(pm) if 'trail' in m.lower() and not m.startswith('_')]
        
        if trailing_methods:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –º–µ—Ç–æ–¥—ã: {', '.join(trailing_methods)}")
            self.test_results['trailing_stop'] = True
        else:
            print("   ‚ö†Ô∏è  Trailing stop –º–µ—Ç–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ Position model
            if hasattr(position, 'trailing_stop') or hasattr(position, 'trailing_activated'):
                print("   ‚ÑπÔ∏è  Trailing stop –ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã –≤ Position model")
                self.test_results['trailing_stop'] = True
            else:
                print("   ‚ö†Ô∏è  Trailing stop –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
                self.test_results['trailing_stop'] = False
                
    async def print_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "="*80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*80)
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n")
        
        results_map = {
            'position_open': '1. –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏',
            'tp_closure': '2. TP Hit Closure',
            'sl_closure': '3. SL Hit Closure',
            'manual_closure': '4. Manual Closure',
            'trailing_stop': '5. Trailing Stop',
        }
        
        for key, name in results_map.items():
            result = self.test_results[key]
            if result is True:
                status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢"
            elif result is False:
                status = "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            elif result is None:
                status = "‚ö†Ô∏è  –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û"
            else:
                status = "‚ùì –ù–ï –ü–†–û–í–ï–†–ï–ù–û"
                
            print(f"   {name}: {status}")
            
        # –û–±—â–∏–π —Å—á—ë—Ç
        working = sum(1 for v in self.test_results.values() if v is True)
        total = len(self.test_results)
        percentage = (working / total) * 100
        
        print(f"\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {working}/{total} ({percentage:.0f}%)")
        
        if percentage >= 80:
            print("\nüéâ –û–¢–õ–ò–ß–ù–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
        elif percentage >= 50:
            print("\n‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        else:
            print("\n‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –†–ê–ë–û–¢–ê: –ú–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
            
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        try:
            # Setup
            await self.setup_engine()
            
            # Start engine
            engine_task = asyncio.create_task(self.engine.start())
            await asyncio.sleep(2)
            
            # Wait for scanning
            await self.wait_for_scanning()
            
            # Open position
            position = await self.open_test_position()
            
            await asyncio.sleep(3)
            
            # Run tests
            await self.test_tp_closure(position)
            await self.test_sl_closure(position)
            await self.test_trailing_stop(position)
            await self.test_manual_closure(position)
            
            # Results
            await self.print_results()
            
            # Cleanup
            await self.engine.stop()
            engine_task.cancel()
            
            print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            
            if self.engine:
                await self.engine.stop()


async def main():
    """Entry point"""
    test = PositionLifecycleTest()
    await test.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
