#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
1. –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
3. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
4. –£–∑–∫–∏–µ –º–µ—Å—Ç–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ
"""

import re
import os
from collections import defaultdict, Counter
from datetime import datetime, timedelta
from typing import Dict, List, Tuple


class PipelineChecker:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞–π–ø–ª–∞–π–Ω–∞ –±–æ—Ç–∞."""
    
    def __init__(self, log_file: str = 'logs/general.log'):
        self.log_file = log_file
        self.pipeline_stages = {
            'SCANNING': 0,
            'LEVEL_BUILDING': 0,
            'SIGNAL_WAIT': 0,
            'SIZING': 0,
            'EXECUTION': 0,
            'MANAGING': 0
        }
        self.scan_results = []
        self.signal_results = []
        self.trade_results = []
        self.errors = []
        self.rate_limit_errors = []
        self.timeouts = []
        
    def parse_logs(self, last_n_lines: int = 5000):
        """–ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤."""
        print(f"üìñ –ß–∏—Ç–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {last_n_lines} —Å—Ç—Ä–æ–∫ –∏–∑ {self.log_file}...")
        
        if not os.path.exists(self.log_file):
            print(f"‚ùå –õ–æ–≥-—Ñ–∞–π–ª {self.log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
        with open(self.log_file, 'r') as f:
            lines = f.readlines()
            
        recent_lines = lines[-last_n_lines:] if len(lines) > last_n_lines else lines
        
        print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(recent_lines)} —Å—Ç—Ä–æ–∫\n")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        patterns = {
            'scan_complete': re.compile(r'Market scan completed: (\d+) candidates found'),
            'scan_start': re.compile(r'Starting market scan'),
            'scan_symbols': re.compile(r'Fetching comprehensive market data for (\d+) symbols'),
            'scan_timeout': re.compile(r'Market data fetch timeout after (\d+)s'),
            'scan_fetched': re.compile(r'Comprehensive data fetch completed: (\d+) symbols'),
            'state_transition': re.compile(r'State transition: (\w+) -> (\w+)'),
            'current_state': re.compile(r'state: (\w+)'),
            'signal_generated': re.compile(r'Signal generated|Found (\d+) signals'),
            'trade_executed': re.compile(r'Order created|Order executed|Trade executed'),
            'error': re.compile(r'ERROR|Exception|Failed|failed'),
            'rate_limit': re.compile(r'429|rate limit|RateLimitExceeded', re.IGNORECASE),
            'timeout': re.compile(r'timeout|timed out', re.IGNORECASE),
            'cycle_count': re.compile(r'Completed (\d+) cycles'),
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫
        for line in recent_lines:
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if match := patterns['scan_complete'].search(line):
                candidates = int(match.group(1))
                timestamp = self._extract_timestamp(line)
                self.scan_results.append({
                    'timestamp': timestamp,
                    'candidates': candidates
                })
                
            if match := patterns['scan_symbols'].search(line):
                symbols_count = int(match.group(1))
                timestamp = self._extract_timestamp(line)
                print(f"   üîç {timestamp}: –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {symbols_count} —Å–∏–º–≤–æ–ª–æ–≤")
                
            if match := patterns['scan_timeout'].search(line):
                timeout_sec = int(match.group(1))
                self.timeouts.append({
                    'timestamp': self._extract_timestamp(line),
                    'timeout': timeout_sec
                })
                
            if match := patterns['scan_fetched'].search(line):
                fetched_count = int(match.group(1))
                timestamp = self._extract_timestamp(line)
                print(f"   ‚úÖ {timestamp}: –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ {fetched_count} —Å–∏–º–≤–æ–ª–∞–º")
                
            # –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
            if match := patterns['state_transition'].search(line):
                from_state = match.group(1)
                to_state = match.group(2)
                timestamp = self._extract_timestamp(line)
                print(f"   üîÑ {timestamp}: {from_state} ‚Üí {to_state}")
                self.pipeline_stages[to_state] = self.pipeline_stages.get(to_state, 0) + 1
                
            # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if match := patterns['current_state'].search(line):
                state = match.group(1)
                self.pipeline_stages[state] = self.pipeline_stages.get(state, 0) + 1
                
            # –°–∏–≥–Ω–∞–ª—ã
            if patterns['signal_generated'].search(line):
                timestamp = self._extract_timestamp(line)
                self.signal_results.append({
                    'timestamp': timestamp
                })
                
            # –°–¥–µ–ª–∫–∏
            if patterns['trade_executed'].search(line):
                timestamp = self._extract_timestamp(line)
                self.trade_results.append({
                    'timestamp': timestamp
                })
                
            # –û—à–∏–±–∫–∏
            if patterns['error'].search(line):
                self.errors.append({
                    'timestamp': self._extract_timestamp(line),
                    'line': line.strip()
                })
                
            # Rate limit
            if patterns['rate_limit'].search(line):
                self.rate_limit_errors.append({
                    'timestamp': self._extract_timestamp(line),
                    'line': line.strip()
                })
                
    def _extract_timestamp(self, line: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ timestamp –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞."""
        match = re.match(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})', line)
        if match:
            return match.group(1)
        return 'N/A'
        
    def analyze_scanning(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        print("\n" + "="*80)
        print("üîç –ê–ù–ê–õ–ò–ó –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
        print("="*80 + "\n")
        
        if not self.scan_results:
            print("‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–≥–∞—Ö")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ë–æ—Ç –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            print("   - –õ–æ–≥–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ")
            return
            
        print(f"–í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {len(self.scan_results)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º
        candidates_counts = [r['candidates'] for r in self.scan_results]
        
        if candidates_counts:
            avg_candidates = sum(candidates_counts) / len(candidates_counts)
            max_candidates = max(candidates_counts)
            min_candidates = min(candidates_counts)
            zero_candidates = candidates_counts.count(0)
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_candidates:.1f}")
            print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_candidates}")
            print(f"   –ú–∏–Ω–∏–º—É–º: {min_candidates}")
            print(f"   –¶–∏–∫–ª–æ–≤ —Å 0 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏: {zero_candidates}/{len(candidates_counts)}")
            
            if zero_candidates == len(candidates_counts):
                print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è 0 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤!")
                print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("   - –§–∏–ª—å—Ç—Ä—ã —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ")
                print("   - –ù–µ –ø–æ–ª—É—á–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–∏—Ä–∂–∏")
                print("   - Timeout –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                print("   - ENGINE_MARKET_FETCH_LIMIT —Å–ª–∏—à–∫–æ–º –º–∞–ª")
            elif zero_candidates > len(candidates_counts) * 0.8:
                print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ–ª–µ–µ 80% —Ü–∏–∫–ª–æ–≤ –±–µ–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            else:
                print("\n‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:")
        for result in self.scan_results[-10:]:
            status = "‚úÖ" if result['candidates'] > 0 else "‚ùå"
            print(f"   {status} {result['timestamp']}: {result['candidates']} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            
    def analyze_timeouts(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤."""
        print("\n" + "="*80)
        print("‚è±Ô∏è  –ê–ù–ê–õ–ò–ó –¢–ê–ô–ú–ê–£–¢–û–í")
        print("="*80 + "\n")
        
        if not self.timeouts:
            print("‚úÖ –¢–∞–π–º–∞—É—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return
            
        print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–∞–π–º–∞—É—Ç–æ–≤: {len(self.timeouts)}")
        print(f"\nüïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–∞–π–º–∞—É—Ç–æ–≤:")
        for timeout in self.timeouts[-5:]:
            print(f"   ‚è±Ô∏è  {timeout['timestamp']}: Timeout –ø–æ—Å–ª–µ {timeout['timeout']}s")
            
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   - –£–≤–µ–ª–∏—á—å—Ç–µ MARKET_DATA_TIMEOUT –≤ .env")
        print("   - –£–º–µ–Ω—å—à–∏—Ç–µ ENGINE_MARKET_FETCH_LIMIT")
        print("   - –£–≤–µ–ª–∏—á—å—Ç–µ LIVE_SCAN_CONCURRENCY")
        
    def analyze_pipeline_flow(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ –ø–∞–π–ø–ª–∞–π–Ω."""
        print("\n" + "="*80)
        print("üîÑ –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê –ü–ê–ô–ü–õ–ê–ô–ù–ê")
        print("="*80 + "\n")
        
        if not self.pipeline_stages or all(v == 0 for v in self.pipeline_stages.values()):
            print("‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –º–µ–∂–¥—É —Å—Ç–∞–¥–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É")
            return
        
        print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∫–∞–∂–¥—É—é —Å—Ç–∞–¥–∏—é:")
        
        max_count = max(self.pipeline_stages.values()) if self.pipeline_stages.values() else 1
        max_count = max(1, max_count)  # Ensure at least 1 to avoid division by zero
        
        for stage, count in sorted(self.pipeline_stages.items(), key=lambda x: x[1], reverse=True):
            bar_length = int((count / max_count) * 40)
            bar = "‚ñà" * bar_length
            print(f"   {stage:20s} {bar} {count}")
            
        # –ê–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç
        print("\nüîç –ê–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç:")
        
        scanning_count = self.pipeline_stages.get('SCANNING', 0)
        signal_wait_count = self.pipeline_stages.get('SIGNAL_WAIT', 0)
        execution_count = self.pipeline_stages.get('EXECUTION', 0)
        
        if scanning_count > signal_wait_count * 2:
            print("   ‚ö†Ô∏è  –ë–æ—Ç –∑–∞—Å—Ç—Ä–µ–≤–∞–µ—Ç –≤ SCANNING - –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        elif signal_wait_count > execution_count * 2:
            print("   ‚ö†Ô∏è  –ë–æ—Ç –∑–∞—Å—Ç—Ä–µ–≤–∞–µ—Ç –≤ SIGNAL_WAIT - –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã")
        else:
            print("   ‚úÖ –ü–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ –ø–∞–π–ø–ª–∞–π–Ω —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω")
            
    def analyze_signals_and_trades(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–¥–µ–ª–æ–∫."""
        print("\n" + "="*80)
        print("üì° –ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–û–í –ò –°–î–ï–õ–û–ö")
        print("="*80 + "\n")
        
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(self.signal_results)}")
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {len(self.trade_results)}")
        
        if len(self.signal_results) == 0:
            print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–∏–≥–Ω–∞–ª—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è!")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            print("   - –§–∏–ª—å—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ")
            print("   - –û—à–∏–±–∫–∏ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ —Å–∏–≥–Ω–∞–ª–æ–≤")
        elif len(self.trade_results) == 0 and len(self.signal_results) > 0:
            print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–∏–≥–Ω–∞–ª—ã –µ—Å—Ç—å, –Ω–æ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç!")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏")
            print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞")
            print("   - –û—à–∏–±–∫–∏ –≤ execution manager")
        else:
            conversion = (len(self.trade_results) / len(self.signal_results) * 100) if len(self.signal_results) > 0 else 0
            print(f"\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Å–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Å–¥–µ–ª–∫–∏: {conversion:.1f}%")
            
    def analyze_errors(self):
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫."""
        print("\n" + "="*80)
        print("üêõ –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö")
        print("="*80 + "\n")
        
        if not self.errors:
            print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        else:
            print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(self.errors)}")
            print(f"\nüïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫:")
            for error in self.errors[-5:]:
                print(f"   ‚ùå {error['timestamp']}")
                print(f"      {error['line'][:120]}...")
                
        if self.rate_limit_errors:
            print(f"\n‚ö†Ô∏è  Rate limit –æ—à–∏–±–æ–∫: {len(self.rate_limit_errors)}")
            print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   - –£–º–µ–Ω—å—à–∏—Ç–µ LIVE_SCAN_CONCURRENCY")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ rate limiter –∞–∫—Ç–∏–≤–µ–Ω")
            
    def print_summary(self):
        """–ü–µ—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏."""
        print("\n" + "="*80)
        print("üìã –°–í–û–î–ö–ê")
        print("="*80 + "\n")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if not self.scan_results:
            status = "üî¥ –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            print(f"–°—Ç–∞—Ç—É—Å: {status}")
            print("\n–ü—Ä–æ–±–ª–µ–º–∞: –ë–æ—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω: ps aux | grep breakout")
            print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏: tail -50 logs/general.log")
            print("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç: ./stop.sh && ./start.sh")
            return
            
        zero_candidates_pct = (
            self.scan_results[-10:].count({'timestamp': r['timestamp'], 'candidates': 0} 
            for r in self.scan_results[-10:]) / len(self.scan_results[-10:]) * 100
            if len(self.scan_results) >= 10 else 0
        )
        
        if all(r['candidates'] == 0 for r in self.scan_results[-10:]):
            status = "üü° –†–ê–ë–û–¢–ê–ï–¢, –ù–û –ó–ê–°–¢–†–Ø–õ"
            print(f"–°—Ç–∞—Ç—É—Å: {status}")
            print("\n–ü—Ä–æ–±–ª–µ–º–∞: –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∑–∞—Å—Ç—Ä–µ–≤–∞–µ—Ç –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ (0 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤)")
            print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   1. –£–≤–µ–ª–∏—á—å—Ç–µ ENGINE_MARKET_FETCH_LIMIT –≤ .env (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ)")
            print("   2. –£–≤–µ–ª–∏—á—å—Ç–µ MARKET_DATA_TIMEOUT (–≤–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –Ω–µ —É—Å–ø–µ–≤–∞—é—Ç –ø–æ–ª—É—á–∏—Ç—å—Å—è)")
            print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –ø—Ä–µ—Å–µ—Ç–µ - –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ")
            print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 test_bybit_data_fetching.py")
        elif len(self.signal_results) == 0:
            status = "üü° –°–ö–ê–ù–ò–†–£–ï–¢, –ù–û –ù–ï–¢ –°–ò–ì–ù–ê–õ–û–í"
            print(f"–°—Ç–∞—Ç—É—Å: {status}")
            print("\n–ü—Ä–æ–±–ª–µ–º–∞: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è")
            print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ø—Ä–µ—Å–µ—Ç–µ")
            print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ signal_manager")
            print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø—Ä–µ—Å–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, breakout_v1_relaxed)")
        else:
            status = "üü¢ –†–ê–ë–û–¢–ê–ï–¢ –ù–û–†–ú–ê–õ–¨–ù–û"
            print(f"–°—Ç–∞—Ç—É—Å: {status}")
            print("\n‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
            print(f"   - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(self.scan_results)} —Ü–∏–∫–ª–æ–≤")
            print(f"   - –°–∏–≥–Ω–∞–ª—ã: {len(self.signal_results)}")
            print(f"   - –°–¥–µ–ª–∫–∏: {len(self.trade_results)}")
            
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        print("="*80)
        print("üîç –ü–†–û–í–ï–†–ö–ê –ü–ê–ô–ü–õ–ê–ô–ù–ê –ë–û–¢–ê")
        print("="*80)
        
        self.parse_logs()
        self.analyze_scanning()
        self.analyze_timeouts()
        self.analyze_pipeline_flow()
        self.analyze_signals_and_trades()
        self.analyze_errors()
        self.print_summary()
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    checker = PipelineChecker()
    
    try:
        checker.run()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()
