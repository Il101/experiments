#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ - –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ–≥–æ.
"""

import subprocess
import sys
import os


def print_header(text: str):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
    print("\n" + "="*80)
    print(f"  {text}")
    print("="*80 + "\n")


def check_env_settings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ .env."""
    print_header("üîß –ù–ê–°–¢–†–û–ô–ö–ò .env")
    
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
        
    with open('.env', 'r') as f:
        content = f.read()
        
    settings = {
        'ENGINE_MARKET_FETCH_LIMIT': None,
        'LIVE_SCAN_CONCURRENCY': None,
        'MARKET_DATA_TIMEOUT': None
    }
    
    for line in content.split('\n'):
        for key in settings.keys():
            if line.startswith(key):
                # Extract value
                value = line.split('=')[1].split('#')[0].strip()
                settings[key] = value
                
    print("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    for key, value in settings.items():
        if value:
            print(f"  ‚úÖ {key}: {value}")
        else:
            print(f"  ‚ùå {key}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    
    all_good = True
    
    if not settings['ENGINE_MARKET_FETCH_LIMIT']:
        print("  ‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ENGINE_MARKET_FETCH_LIMIT=50")
        all_good = False
    elif int(settings['ENGINE_MARKET_FETCH_LIMIT']) > 100:
        print(f"  ‚ö†Ô∏è  {settings['ENGINE_MARKET_FETCH_LIMIT']} —Å–∏–º–≤–æ–ª–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ")
        print("     –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 30-50 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
        
    if not settings['LIVE_SCAN_CONCURRENCY']:
        print("  ‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ LIVE_SCAN_CONCURRENCY=15")
        all_good = False
    elif int(settings['LIVE_SCAN_CONCURRENCY']) > 25:
        print(f"  ‚ö†Ô∏è  Concurrency {settings['LIVE_SCAN_CONCURRENCY']} –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å rate limits")
        
    if not settings['MARKET_DATA_TIMEOUT']:
        print("  ‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MARKET_DATA_TIMEOUT=120")
        all_good = False
        
    if all_good:
        print("  ‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã!")
        
    return all_good


def check_bot_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞."""
    print_header("ü§ñ –°–¢–ê–¢–£–° –ë–û–¢–ê")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
    result = subprocess.run(
        ['ps', 'aux'],
        capture_output=True,
        text=True
    )
    
    if 'breakout_bot' in result.stdout or 'start.sh' in result.stdout:
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã
        for line in result.stdout.split('\n'):
            if 'breakout_bot' in line or 'start.sh' in line:
                # –£–ø—Ä–æ—Å—Ç–∏—Ç—å –≤—ã–≤–æ–¥
                parts = line.split()
                if len(parts) >= 11:
                    cpu = parts[2]
                    mem = parts[3]
                    print(f"   PID: {parts[1]}, CPU: {cpu}%, MEM: {mem}%")
        
        return True
    else:
        print("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–∞–Ω–¥–æ–π:")
        print("   ./start.sh")
        return False


def run_pipeline_check():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞."""
    print_header("üîç –ü–†–û–í–ï–†–ö–ê –ü–ê–ô–ü–õ–ê–ô–ù–ê")
    
    try:
        subprocess.run(
            ['python3', 'check_bot_pipeline.py'],
            check=True
        )
        return True
    except subprocess.CalledProcessError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞–π–ø–ª–∞–π–Ω–∞")
        return False
    except FileNotFoundError:
        print("‚ùå –°–∫—Ä–∏–ø—Ç check_bot_pipeline.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False


def print_summary(env_ok: bool, bot_running: bool):
    """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏."""
    print_header("üìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê")
    
    if env_ok and bot_running:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("\nüìä –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/general.log")
        print("   2. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏")
        print("   3. –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python3 test_bybit_data_fetching.py")
    elif not bot_running:
        print("‚ö†Ô∏è  –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print("\nüîß –î–µ–π—Å—Ç–≤–∏—è:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç: ./start.sh")
        print("   2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞")
    elif not env_ok:
        print("‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã")
        print("\nüîß –î–µ–π—Å—Ç–≤–∏—è:")
        print("   1. –û–±–Ω–æ–≤–∏—Ç–µ .env —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –≤—ã—à–µ")
        print("   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç: ./stop.sh && ./start.sh")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞")
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
        print("\nüîß –î–µ–π—Å—Ç–≤–∏—è:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ")
        print("   2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("="*80)
    print("  üöÄ –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–û–¢–ê")
    print("="*80)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    env_ok = check_env_settings()
    bot_running = check_bot_status()
    
    if bot_running:
        run_pipeline_check()
    
    print_summary(env_ok, bot_running)
    
    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
