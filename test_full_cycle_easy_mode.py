#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å –û–ß–ï–ù–¨ –ú–Ø–ì–ö–ò–ú–ò –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.

–¶–µ–ª—å: –£–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Bybit:
    SCANNING ‚Üí LEVEL_BUILDING ‚Üí SIGNAL_WAIT ‚Üí SIZING ‚Üí EXECUTION ‚Üí MANAGING ‚Üí IDLE

–ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —á—Ç–æ–±—ã:
    1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –ª—é–±–æ–º —Ç–æ–∫–µ–Ω–µ
    2. –û—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
    3. –ü–æ–¥–µ—Ä–∂–∞—Ç—å –µ—ë
    4. –ó–∞–∫—Ä—ã—Ç—å —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º/–ª–æ—Å—Å–æ–º
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from breakout_bot.config.settings import Settings
from breakout_bot.core.engine import OptimizedOrchestraEngine
from breakout_bot.core.state_machine import TradingState


class EasyModeConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –æ—á–µ–Ω—å –º—è–≥–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @staticmethod
    def get_easy_preset() -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏"""
        return {
            # === –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ—á—Ç–∏ –≤—Å—ë ===
            "scanning": {
                "min_24h_volume": 100,  # $100 (–≤–º–µ—Å—Ç–æ $100k+)
                "min_oi": 10,  # $10 OI (–≤–º–µ—Å—Ç–æ $50k+)
                "max_spread_pct": 5.0,  # 5% spread (–≤–º–µ—Å—Ç–æ 0.2%)
                "min_depth_0_3pct": 10,  # $10 –≥–ª—É–±–∏–Ω–∞ (–≤–º–µ—Å—Ç–æ $5k+)
                "min_depth_0_5pct": 10,  # $10 –≥–ª—É–±–∏–Ω–∞
                "min_depth_1pct": 10,  # $10 –≥–ª—É–±–∏–Ω–∞
                "min_trades_per_minute": 0.1,  # 0.1 —Å–¥–µ–ª–æ–∫/–º–∏–Ω (–≤–º–µ—Å—Ç–æ 5)
                "atr_range": [0.0001, 100.0],  # –õ—é–±–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                "volume_surge_1h": 0.1,  # 10% surge (–≤–º–µ—Å—Ç–æ 150%)
                "volume_surge_5m": 0.1,  # 10% surge
                "max_candidates": 50,
            },
            
            # === –£–†–û–í–ù–ò: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è ===
            "levels": {
                "lookback_candles": 50,  # –ú–µ–Ω—å—à–µ —Å–≤–µ—á–µ–π
                "min_touches": 2,  # 2 –∫–∞—Å–∞–Ω–∏—è (–≤–º–µ—Å—Ç–æ 3)
                "touch_threshold_atr": 0.5,
                "merge_threshold_atr": 0.3,
                "strength_threshold": 0.3,  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ —Å–∏–ª—ã
                "volume_threshold": 0.5,  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞
            },
            
            # === –°–ò–ì–ù–ê–õ–´: –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ—á—Ç–∏ –ª—é–±–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ ===
            "signals": {
                "min_breakout_strength": 0.5,  # 50% —Å–∏–ª—ã (–≤–º–µ—Å—Ç–æ 70%)
                "min_volume_ratio": 1.0,  # 1x –æ–±—ä–µ–º (–≤–º–µ—Å—Ç–æ 1.5x)
                "max_distance_from_level_atr": 1.0,  # –î–∞–ª–µ–∫–æ –æ—Ç —É—Ä–æ–≤–Ω—è OK
                "min_momentum_score": 0.3,  # 30% –º–æ–º–µ–Ω—Ç—É–º (–≤–º–µ—Å—Ç–æ 60%)
                "min_trend_alignment": 0.3,  # 30% —Ç—Ä–µ–Ω–¥ (–≤–º–µ—Å—Ç–æ 60%)
                "require_volume_confirmation": False,  # –ù–µ —Ç—Ä–µ–±—É–µ–º –æ–±—ä–µ–º
                "allow_against_trend": True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞
            },
            
            # === –†–ò–°–ö: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) ===
            "risk": {
                "max_portfolio_risk": 0.5,  # 50% –∫–∞–ø–∏—Ç–∞–ª–∞ (!)
                "max_position_risk": 0.1,  # 10% –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
                "max_open_positions": 3,
                "min_reward_risk_ratio": 1.0,  # 1:1 RR (–≤–º–µ—Å—Ç–æ 2:1)
                "default_stop_loss_atr": 1.0,  # 1 ATR —Å—Ç–æ–ø
                "default_take_profit_atr": 2.0,  # 2 ATR –ø—Ä–æ—Ñ–∏—Ç
            },
            
            # === –†–ê–ó–ú–ï–† –ü–û–ó–ò–¶–ò–ò: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ===
            "sizing": {
                "default_size_usd": 10,  # $10 –ø–æ–∑–∏—Ü–∏—è
                "min_size_usd": 5,  # –ú–∏–Ω–∏–º—É–º $5
                "max_size_usd": 100,  # –ú–∞–∫—Å–∏–º—É–º $100
                "use_dynamic_sizing": False,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            },
            
            # === –£–ü–†–ê–í–õ–ï–ù–ò–ï: –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ ===
            "management": {
                "use_trailing_stop": True,
                "trailing_stop_activation_pct": 0.5,  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ 0.5% –ø—Ä–æ—Ñ–∏—Ç–∞
                "trailing_stop_distance_atr": 0.5,  # 0.5 ATR trailing
                "breakeven_trigger_pct": 0.3,  # –í –±–µ–∑—É–±—ã—Ç–æ–∫ –ø—Ä–∏ 0.3%
                "partial_take_profit_levels": [
                    {"pct_profit": 0.5, "pct_close": 0.3},  # 30% –ø—Ä–∏ 0.5% –ø—Ä–æ—Ñ–∏—Ç–∞
                    {"pct_profit": 1.0, "pct_close": 0.3},  # 30% –ø—Ä–∏ 1% –ø—Ä–æ—Ñ–∏—Ç–∞
                ],
                "max_hold_time_minutes": 5,  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç –¥–µ—Ä–∂–∏–º
                "force_close_on_timeout": True,  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
            },
        }


class FullCycleTestEasyMode:
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –º—è–≥–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""
    
    def __init__(self):
        self.engine = None
        self.start_time = None
        self.test_duration_minutes = 10  # 10 –º–∏–Ω—É—Ç —Ç–µ—Å—Ç–∞
        self.state_history = []
        self.signals_generated = []
        self.positions_opened = []
        self.positions_closed = []
        
    async def setup_engine(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤–∏–∂–∫–∞ —Å –º—è–≥–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""
        print("=" * 80)
        print("üöÄ FULL CYCLE TEST - EASY MODE (Real Data)")
        print("=" * 80)
        print()
        print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞:")
        print("   ‚Ä¢ –†–µ–∂–∏–º: Paper Trading + Real Bybit Data")
        print("   ‚Ä¢ –ö—Ä–∏—Ç–µ—Ä–∏–∏: –û–ß–ï–ù–¨ –ú–Ø–ì–ö–ò–ï (–¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤)")
        print("   ‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10 –º–∏–Ω—É—Ç")
        print("   ‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π: $10-$100")
        print("   ‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: 5 –º–∏–Ω—É—Ç")
        print()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å –º—è–≥–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
        easy_config = EasyModeConfig.get_easy_preset()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = Settings()
        settings.mode = "paper"
        settings.exchange = "bybit"
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
        print("‚öôÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞...")
        self.engine = OptimizedOrchestraEngine(
            preset_name="breakout_v1_working"
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        await self.engine.initialize()
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ –º—è–≥–∫–∏–π
        print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏...")
        self._apply_easy_config(easy_config)
        
        print("‚úÖ –î–≤–∏–∂–æ–∫ –≥–æ—Ç–æ–≤!")
        print()
        
    def _apply_easy_config(self, config: Dict[str, Any]):
        """–ü—Ä–∏–º–µ–Ω—è–µ–º –º—è–≥–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ –¥–≤–∏–∂–∫—É"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å–∫–∞–Ω–µ—Ä–∞
        if hasattr(self.engine, 'scanning_manager') and self.engine.scanning_manager:
            scanner = self.engine.scanning_manager.scanner
            if scanner and hasattr(scanner, 'config'):
                for key, value in config['scanning'].items():
                    setattr(scanner.config, key, value)
                print(f"   ‚úì –°–∫–∞–Ω–µ—Ä: –º–∏–Ω. –æ–±—ä–µ–º ${config['scanning']['min_24h_volume']}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å–∏–≥–Ω–∞–ª–æ–≤
        if hasattr(self.engine, 'signal_manager') and self.engine.signal_manager:
            sig_gen = self.engine.signal_manager.signal_generator
            if sig_gen and hasattr(sig_gen, 'config'):
                for key, value in config['signals'].items():
                    if hasattr(sig_gen.config, key):
                        setattr(sig_gen.config, key, value)
                print(f"   ‚úì –°–∏–≥–Ω–∞–ª—ã: –º–∏–Ω. —Å–∏–ª–∞ {config['signals']['min_breakout_strength']*100}%")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
        if hasattr(self.engine, 'risk_manager') and self.engine.risk_manager:
            for key, value in config['risk'].items():
                if hasattr(self.engine.risk_manager, key):
                    setattr(self.engine.risk_manager, key, value)
            print(f"   ‚úì –†–∏—Å–∫: –º–∞–∫—Å. {config['risk']['max_portfolio_risk']*100}% –∫–∞–ø–∏—Ç–∞–ª–∞")
        
    async def monitor_state_changes(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        prev_state = None
        
        while True:
            await asyncio.sleep(0.5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫
            
            if not self.engine:
                continue
                
            current_state = self.engine.state_machine.current_state
            
            if current_state != prev_state:
                timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
                self.state_history.append({
                    'timestamp': timestamp,
                    'state': current_state,
                    'prev_state': prev_state
                })
                
                print(f"\n{'='*80}")
                print(f"[{timestamp}] üîÑ STATE CHANGE: {prev_state} ‚Üí {current_state}")
                print(f"{'='*80}")
                
                # –í—ã–≤–æ–¥–∏–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ—É –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
                await self._print_state_details(current_state)
                
                prev_state = current_state
                
    async def _print_state_details(self, state: TradingState):
        """–í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if state == TradingState.SCANNING:
            print("üì° –°–∫–∞–Ω–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫...")
            
        elif state == TradingState.LEVEL_BUILDING:
            print("üìä –°—Ç—Ä–æ–∏–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è...")
            
        elif state == TradingState.SIGNAL_WAIT:
            candidates = len(self.engine.scanning_manager.scan_results) if self.engine.scanning_manager else 0
            print(f"üéØ –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ {candidates} –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö...")
            
        elif state == TradingState.SIZING:
            signals = len(self.engine.signal_manager.pending_signals) if self.engine.signal_manager else 0
            print(f"üìè –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è {signals} —Å–∏–≥–Ω–∞–ª–æ–≤...")
            
        elif state == TradingState.EXECUTION:
            print("üí∞ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏!")
            
        elif state == TradingState.MANAGING:
            positions = len(self.engine.position_manager.active_positions) if self.engine.position_manager else 0
            print(f"üìà –£–ø—Ä–∞–≤–ª—è–µ–º {positions} –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏...")
            await self._print_positions_status()
            
        elif state == TradingState.IDLE:
            print("üèÅ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã, —Å–∏—Å—Ç–µ–º–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è...")
            await self._print_final_position_stats()
            
    async def _print_positions_status(self):
        """–í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.engine or not self.engine.position_manager:
            return
            
        positions = self.engine.position_manager.active_positions
        if not positions:
            return
            
        print("\nüìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
        for pos in positions.values():
            pnl = pos.unrealized_pnl if hasattr(pos, 'unrealized_pnl') else 0
            pnl_pct = (pnl / pos.entry_price / pos.size * 100) if pos.size > 0 else 0
            
            print(f"   ‚Ä¢ {pos.symbol}:")
            print(f"      Entry: ${pos.entry_price:.6f}")
            print(f"      Size: {pos.size}")
            print(f"      PnL: ${pnl:.2f} ({pnl_pct:+.2f}%)")
            print(f"      Stop: ${pos.stop_loss:.6f}")
            print(f"      Target: ${pos.take_profit:.6f}")
        print()
        
    async def _print_final_position_stats(self):
        """–í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.engine or not self.engine.position_manager:
            return
            
        closed = self.engine.position_manager.closed_positions
        if not closed:
            return
            
        print("\nüíº –ó–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
        total_pnl = 0
        for pos in closed:
            pnl = pos.realized_pnl if hasattr(pos, 'realized_pnl') else 0
            total_pnl += pnl
            
            print(f"   ‚Ä¢ {pos.symbol}:")
            print(f"      Entry: ${pos.entry_price:.6f}")
            print(f"      Exit: ${pos.exit_price:.6f}")
            print(f"      PnL: ${pnl:.2f}")
            print(f"      Reason: {pos.close_reason if hasattr(pos, 'close_reason') else 'Unknown'}")
            
        print(f"\n   üí∞ Total PnL: ${total_pnl:.2f}")
        print()
        
    async def monitor_signals(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        prev_signal_count = 0
        
        while True:
            await asyncio.sleep(2)
            
            if not self.engine or not self.engine.signal_manager:
                continue
                
            current_signals = len(self.engine.signal_manager.pending_signals)
            
            if current_signals > prev_signal_count:
                new_signals = current_signals - prev_signal_count
                timestamp = datetime.now().strftime("%H:%M:%S")
                
                print(f"\n‚ö° [{timestamp}] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {new_signals} –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤!")
                print(f"   –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {current_signals}")
                
                # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                for signal in list(self.engine.signal_manager.pending_signals)[-new_signals:]:
                    print(f"\n   üìä {signal.symbol}:")
                    print(f"      –¢–∏–ø: {signal.signal_type}")
                    print(f"      –°–∏–ª–∞: {signal.strength:.2%}")
                    print(f"      –¶–µ–Ω–∞: ${signal.price:.6f}")
                    print(f"      –°—Ç–æ–ø: ${signal.stop_loss:.6f}")
                    print(f"      –¶–µ–ª—å: ${signal.take_profit:.6f}")
                    
                    self.signals_generated.append({
                        'timestamp': timestamp,
                        'symbol': signal.symbol,
                        'type': signal.signal_type,
                        'strength': signal.strength,
                        'price': signal.price
                    })
                
                prev_signal_count = current_signals
                
    async def run_test(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤–∏–∂–∫–∞
            await self.setup_engine()
            
            # –ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞
            print("üöÄ –ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞...")
            self.start_time = datetime.now()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
            monitor_task = asyncio.create_task(self.monitor_state_changes())
            signal_task = asyncio.create_task(self.monitor_signals())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫
            engine_task = asyncio.create_task(self.engine.start())
            
            print(f"‚è±Ô∏è  –¢–µ—Å—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å {self.test_duration_minutes} –º–∏–Ω—É—Ç...")
            print(f"   –ù–∞—á–∞–ª–æ: {self.start_time.strftime('%H:%M:%S')}")
            print()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏–ª–∏ –¥–≤–∏–∂–∫–∞
            try:
                await asyncio.wait_for(
                    engine_task,
                    timeout=self.test_duration_minutes * 60
                )
            except asyncio.TimeoutError:
                print("\n‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–æ–∫...")
                await self.engine.stop()
                
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            monitor_task.cancel()
            signal_task.cancel()
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
            await self.print_summary()
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            
        finally:
            if self.engine:
                await self.engine.stop()
                
    async def print_summary(self):
        """–í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        print("\n" + "="*80)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ê")
        print("="*80)
        
        runtime = datetime.now() - self.start_time
        print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime}")
        
        print(f"\nüîÑ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ({len(self.state_history)} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤):")
        for i, record in enumerate(self.state_history, 1):
            print(f"   {i}. [{record['timestamp']}] {record['prev_state']} ‚Üí {record['state']}")
            
        print(f"\n‚ö° –°–∏–≥–Ω–∞–ª—ã: {len(self.signals_generated)}")
        for sig in self.signals_generated:
            print(f"   ‚Ä¢ [{sig['timestamp']}] {sig['symbol']} - {sig['type']} (—Å–∏–ª–∞: {sig['strength']:.2%})")
            
        if self.engine and self.engine.position_manager:
            active = len(self.engine.position_manager.active_positions)
            closed = len(self.engine.position_manager.closed_positions)
            
            print(f"\nüíº –ü–æ–∑–∏—Ü–∏–∏:")
            print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}")
            print(f"   ‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {closed}")
            
            if closed > 0:
                total_pnl = sum(
                    pos.realized_pnl for pos in self.engine.position_manager.closed_positions
                    if hasattr(pos, 'realized_pnl')
                )
                print(f"   ‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π PnL: ${total_pnl:.2f}")
                
        print("\n" + "="*80)
        print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
        print("="*80)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test = FullCycleTestEasyMode()
    await test.run_test()


if __name__ == "__main__":
    asyncio.run(main())
