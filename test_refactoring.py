"""
–¢–µ—Å—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –¥–≤–∏–∂–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from breakout_bot.core.state_machine import StateMachine, TradingState
from breakout_bot.core.error_handler import ErrorHandler, ErrorSeverity, ErrorCategory


async def test_state_machine():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã StateMachine."""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StateMachine...")
    
    # –°–æ–∑–¥–∞—Ç—å StateMachine
    sm = StateMachine(initial_state=TradingState.IDLE)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    assert sm.current_state == TradingState.IDLE
    print(f"‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {sm.current_state.value}")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    success = await sm.transition_to(TradingState.INITIALIZING, "Test initialization")
    assert success == True
    assert sm.current_state == TradingState.INITIALIZING
    print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥: {sm.current_state.value}")
    
    # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    success = await sm.transition_to(TradingState.EXECUTION, "Invalid transition")
    assert success == False
    assert sm.current_state == TradingState.INITIALIZING  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    print(f"‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {sm.current_state.value}")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    await sm.transition_to(TradingState.SCANNING, "Start scanning")
    await sm.transition_to(TradingState.LEVEL_BUILDING, "Found candidates")
    await sm.transition_to(TradingState.SIGNAL_WAIT, "Levels built")
    assert sm.current_state == TradingState.SIGNAL_WAIT
    print(f"‚úÖ –¶–µ–ø–æ—á–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: {sm.current_state.value}")
    
    # –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    history = sm.get_transition_history()
    assert len(history) > 0
    print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {len(history)} –∑–∞–ø–∏—Å–µ–π")
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
    status = sm.get_status()
    assert "current_state" in status
    assert status["is_trading_active"] == True
    print(f"‚úÖ –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è = {status['is_trading_active']}")


async def test_error_handler():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã ErrorHandler."""
    print("\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ErrorHandler...")
    
    # –°–æ–∑–¥–∞—Ç—å ErrorHandler
    eh = ErrorHandler(max_retries=2, retry_backoff=1.0)
    
    # –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫
    connection_error = ConnectionError("Failed to connect to exchange")
    error_info = eh.classify_error(connection_error, "exchange", "fetch_balance")
    
    assert error_info.severity == ErrorSeverity.HIGH
    assert error_info.category == ErrorCategory.NETWORK
    print(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–∫–∏: {error_info.severity.value}/{error_info.category.value}")
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ —Å retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
    recovery_action = await eh.handle_error(connection_error, "exchange", "fetch_balance")
    assert "should_retry" in recovery_action
    print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: retry = {recovery_action['should_retry']}")
    
    # –¢–µ—Å—Ç Circuit Breaker - —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥
    for i in range(6):  # –ë–æ–ª—å—à–µ —á–µ–º failure_threshold (5)
        await eh.handle_error(ConnectionError(f"Error {i}"), "test", "operation")
    
    # Circuit Breaker –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç
    cb_status = eh.get_circuit_breaker_status("test", "operation")
    assert cb_status == "open"
    print(f"‚úÖ Circuit Breaker: {cb_status}")
    
    # –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    eh.record_success("test", "operation")
    print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞")
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = eh.get_error_statistics()
    assert stats["total_errors"] > 0
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫: {stats['total_errors']} –≤—Å–µ–≥–æ")


async def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.""" 
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –°–æ–∑–¥–∞—Ç—å StateMachine –∏ ErrorHandler
    sm = StateMachine(initial_state=TradingState.IDLE)
    eh = ErrorHandler(max_retries=1)
    
    # –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await sm.transition_to(TradingState.SCANNING, "Start scanning")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –≤ ERROR —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    recovery_action = await eh.handle_error(
        ValueError("Invalid market data"),
        "scanner", 
        "market_scan"
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
    if recovery_action["next_state"]:
        success = await sm.transition_to(recovery_action["next_state"], "Error recovery")
        assert success == True
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {sm.current_state.value}")
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def run_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –¥–≤–∏–∂–∫–∞...\n")
    
    try:
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        asyncio.run(test_state_machine())
        asyncio.run(test_error_handler())
        asyncio.run(test_integration())
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ StateMachine —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ ErrorHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("\nüí° –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥–≤–∏–∂–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = run_tests()
    sys.exit(0 if success else 1)



