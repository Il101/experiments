#!/usr/bin/env python3
"""
üî¨ POSITION TRACKER EXIT LOGIC TEST

–ü—Ä—è–º–æ–µ unit-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –≤ PositionTracker.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç should_take_profit() –∏ should_update_stop() –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞.
"""

import sys
from decimal import Decimal
from datetime import datetime
import numpy as np

from breakout_bot.position.position_manager import PositionTracker
from breakout_bot.data.models import Position, Candle
from breakout_bot.config.settings import load_preset


def create_test_position(entry: float, sl: float, tp1: float, side: str = "long") -> Position:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é."""
    return Position(
        id="test_position_001",
        symbol="BTC/USDT:USDT",
        side=side,
        strategy="breakout",
        qty=0.5,
        entry=entry,
        sl=sl,
        tp=tp1,
        status="open",
        timestamps={"opened_at": int(datetime.now().timestamp() * 1000)},
        meta={"tp1": tp1, "tp2": tp1 * 1.02}  # TP2 —á—É—Ç—å –≤—ã—à–µ
    )


def create_test_candles(prices: list, count: int = 50) -> list:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–≤–µ—á–∏."""
    candles = []
    base_ts = int(datetime.now().timestamp() * 1000)
    
    for i in range(count):
        # –ë–µ—Ä—ë–º price –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π
        price = prices[min(i, len(prices)-1)]
        candle = Candle(
            ts=base_ts + (i * 300000),  # 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
            open=price,
            high=price * 1.001,
            low=price * 0.999,
            close=price,
            volume=100.0
        )
        candles.append(candle)
    
    return candles


def test_take_profit_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ Take Profit."""
    print("\n" + "="*70)
    print("TEST 1: TAKE PROFIT LOGIC")
    print("="*70)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    entry = 120000.0
    sl = 119000.0
    r_distance = entry - sl  # 1000 USDT
    tp1 = entry + (2 * r_distance)  # 122000 (2R)
    
    print(f"üìä Position Setup:")
    print(f"   Entry: ${entry:,.2f}")
    print(f"   SL: ${sl:,.2f}")
    print(f"   R-distance: ${r_distance:,.2f}")
    print(f"   TP1 (2R): ${tp1:,.2f}")
    
    # –°–æ–∑–¥–∞—ë–º –ø–æ–∑–∏—Ü–∏—é –∏ tracker
    position = create_test_position(entry, sl, tp1, side="long")
    preset = load_preset("breakout_v1_working")
    tracker = PositionTracker(position, preset.position_config)
    
    # Test 1.1: –¶–µ–Ω–∞ –ù–ò–ñ–ï TP1 - –Ω–µ –¥–æ–ª–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å
    current_price = 121000.0
    result = tracker.should_take_profit(current_price)
    
    print(f"\nüß™ Test 1.1: Price BELOW TP1")
    print(f"   Current price: ${current_price:,.2f}")
    print(f"   Result: {result}")
    assert result is None, f"Should be None below TP1, got {result}"
    print(f"   ‚úÖ PASS: No take profit below TP1")
    
    # Test 1.2: –¶–µ–Ω–∞ –î–û–°–¢–ò–ì–õ–ê TP1 - –¥–æ–ª–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å 50%
    current_price = tp1 + 50  # –ß—É—Ç—å –≤—ã—à–µ TP1
    result = tracker.should_take_profit(current_price)
    
    print(f"\nüß™ Test 1.2: Price AT/ABOVE TP1")
    print(f"   Current price: ${current_price:,.2f}")
    print(f"   Result: {result}")
    
    if result:
        action, percentage, price = result
        print(f"   ‚úÖ TAKE PROFIT TRIGGERED!")
        print(f"      Action: {action}")
        print(f"      Close percentage: {percentage}%")
        print(f"      Price: ${price:,.2f}")
        assert action == "tp1", f"Expected 'tp1', got '{action}'"
        assert percentage == 50, f"Expected 50%, got {percentage}%"
        print(f"   ‚úÖ PASS: TP1 triggered correctly")
    else:
        print(f"   ‚ùå FAIL: TP1 not triggered at ${current_price:,.2f}")
        return False
    
    # Test 1.3: TP1 —É–∂–µ –∏—Å–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º TP2
    tracker.tp1_executed = True
    tp2 = entry + (3.5 * r_distance)  # 123500 (3.5R)
    
    current_price = tp2 + 50
    result = tracker.should_take_profit(current_price)
    
    print(f"\nüß™ Test 1.3: Price AT/ABOVE TP2 (after TP1)")
    print(f"   Current price: ${current_price:,.2f}")
    print(f"   TP2 target: ${tp2:,.2f}")
    print(f"   Result: {result}")
    
    if result:
        action, percentage, price = result
        print(f"   ‚úÖ TAKE PROFIT 2 TRIGGERED!")
        print(f"      Action: {action}")
        print(f"      Close percentage: {percentage}%")
        assert action == "tp2", f"Expected 'tp2', got '{action}'"
        print(f"   ‚úÖ PASS: TP2 triggered correctly")
    else:
        print(f"   ‚ö†Ô∏è  TP2 not triggered (may not be implemented)")
    
    return True


def test_stop_update_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Stop-Loss."""
    print("\n" + "="*70)
    print("TEST 2: STOP-LOSS UPDATE LOGIC")
    print("="*70)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    entry = 120000.0
    sl = 119000.0
    tp1 = 122000.0
    
    position = create_test_position(entry, sl, tp1, side="long")
    preset = load_preset("breakout_v1_working")
    tracker = PositionTracker(position, preset.position_config)
    
    print(f"üìä Position Setup:")
    print(f"   Entry: ${entry:,.2f}")
    print(f"   Initial SL: ${sl:,.2f}")
    
    # Test 2.1: TP1 –ù–ï –∏—Å–ø–æ–ª–Ω–µ–Ω - SL –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–≤–∏–≥–∞—Ç—å—Å—è
    current_price = 121000.0
    candles = create_test_candles([120000, 120500, 121000], count=50)
    
    new_stop = tracker.should_update_stop(current_price, candles)
    
    print(f"\nüß™ Test 2.1: Before TP1 execution")
    print(f"   TP1 executed: {tracker.tp1_executed}")
    print(f"   New stop: {new_stop}")
    assert new_stop is None, "SL should not move before TP1"
    print(f"   ‚úÖ PASS: SL doesn't move before TP1")
    
    # Test 2.2: TP1 –ò–°–ü–û–õ–ù–ï–ù - SL –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ breakeven
    tracker.tp1_executed = True
    
    new_stop = tracker.should_update_stop(current_price, candles)
    
    print(f"\nüß™ Test 2.2: After TP1 execution (move to breakeven)")
    print(f"   TP1 executed: {tracker.tp1_executed}")
    print(f"   Breakeven moved: {tracker.breakeven_moved}")
    print(f"   New stop: {new_stop}")
    
    if new_stop:
        print(f"   ‚úÖ BREAKEVEN MOVE TRIGGERED!")
        print(f"      New SL: ${new_stop:,.2f}")
        print(f"      Entry: ${entry:,.2f}")
        print(f"      Difference: ${new_stop - entry:,.2f} (should be ~0.1% for fees)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π SL –≤—ã—à–µ —Å—Ç–∞—Ä–æ–≥–æ –∏ –±–ª–∏–∑–æ–∫ –∫ entry
        assert new_stop > sl, f"New SL ({new_stop}) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ old SL ({sl})"
        assert abs(new_stop - entry) < (entry * 0.002), "New SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ª–∏–∑–∫–æ –∫ entry"
        print(f"   ‚úÖ PASS: SL moved to breakeven correctly")
    else:
        print(f"   ‚ùå FAIL: Breakeven move not triggered")
        return False
    
    # Test 2.3: Trailing stop –ø–æ—Å–ª–µ breakeven (–Ω—É–∂–Ω–æ –º–Ω–æ–≥–æ —Å–≤–µ—á–µ–π –¥–ª—è Chandelier)
    tracker.breakeven_moved = True
    position.sl = new_stop  # –û–±–Ω–æ–≤–ª—è–µ–º SL –≤ –ø–æ–∑–∏—Ü–∏–∏
    
    # –°–æ–∑–¥–∞—ë–º 30 —Å–≤–µ—á–µ–π —Å —Ä–∞—Å—Ç—É—â–µ–π —Ü–µ–Ω–æ–π –¥–ª—è trailing
    rising_prices = [121000 + (i * 100) for i in range(30)]
    candles = create_test_candles(rising_prices, count=30)
    current_price = rising_prices[-1]
    
    new_stop = tracker.should_update_stop(current_price, candles)
    
    print(f"\nüß™ Test 2.3: Trailing stop (after breakeven)")
    print(f"   Breakeven moved: {tracker.breakeven_moved}")
    print(f"   Current price: ${current_price:,.2f}")
    print(f"   Candles count: {len(candles)}")
    print(f"   New stop: {new_stop}")
    
    if new_stop:
        print(f"   ‚úÖ TRAILING STOP UPDATED!")
        print(f"      New SL: ${new_stop:,.2f}")
        print(f"      Previous SL: ${position.sl:,.2f}")
        print(f"      Price: ${current_price:,.2f}")
        
        # –î–ª—è long trailing stop –¥–æ–ª–∂–µ–Ω –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–≤–µ—Ä—Ö
        if new_stop > position.sl:
            print(f"   ‚úÖ PASS: Trailing stop moved up (for long)")
        else:
            print(f"   ‚ö†Ô∏è  Trailing stop didn't move up")
    else:
        print(f"   ‚ö†Ô∏è  Trailing stop not triggered (may need more candles or price movement)")
    
    return True


def test_short_position_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π."""
    print("\n" + "="*70)
    print("TEST 3: SHORT POSITION LOGIC")
    print("="*70)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è SHORT
    entry = 120000.0
    sl = 121000.0  # SL –≤—ã—à–µ entry –¥–ª—è short
    r_distance = sl - entry  # 1000 USDT
    tp1 = entry - (2 * r_distance)  # 118000 (2R –≤–Ω–∏–∑)
    
    print(f"üìä SHORT Position Setup:")
    print(f"   Entry: ${entry:,.2f}")
    print(f"   SL: ${sl:,.2f} (above entry)")
    print(f"   TP1 (2R): ${tp1:,.2f} (below entry)")
    
    position = create_test_position(entry, sl, tp1, side="short")
    preset = load_preset("breakout_v1_working")
    tracker = PositionTracker(position, preset.position_config)
    
    # Test: –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –¥–æ TP1
    current_price = tp1 - 50
    result = tracker.should_take_profit(current_price)
    
    print(f"\nüß™ Test 3.1: SHORT TP1 hit")
    print(f"   Current price: ${current_price:,.2f}")
    print(f"   TP1 target: ${tp1:,.2f}")
    print(f"   Result: {result}")
    
    if result:
        action, percentage, price = result
        print(f"   ‚úÖ SHORT TAKE PROFIT TRIGGERED!")
        print(f"      Action: {action}")
        print(f"      Close percentage: {percentage}%")
        print(f"   ‚úÖ PASS: SHORT TP logic works")
        return True
    else:
        print(f"   ‚ùå FAIL: SHORT TP not triggered")
        return False


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("\n" + "="*70)
    print("üî¨ POSITION TRACKER EXIT LOGIC TEST SUITE")
    print("="*70)
    
    results = []
    
    # Test 1: Take Profit Logic
    try:
        results.append(("Take Profit Logic", test_take_profit_logic()))
    except Exception as e:
        print(f"\n‚ùå Test 1 FAILED with exception: {e}")
        import traceback
        traceback.print_exc()
        results.append(("Take Profit Logic", False))
    
    # Test 2: Stop Update Logic
    try:
        results.append(("Stop Update Logic", test_stop_update_logic()))
    except Exception as e:
        print(f"\n‚ùå Test 2 FAILED with exception: {e}")
        import traceback
        traceback.print_exc()
        results.append(("Stop Update Logic", False))
    
    # Test 3: SHORT Position Logic
    try:
        results.append(("SHORT Position Logic", test_short_position_logic()))
    except Exception as e:
        print(f"\n‚ùå Test 3 FAILED with exception: {e}")
        import traceback
        traceback.print_exc()
        results.append(("SHORT Position Logic", False))
    
    # Summary
    print("\n" + "="*70)
    print("üìä TEST RESULTS SUMMARY")
    print("="*70)
    
    for test_name, passed in results:
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        print(f"{status}: {test_name}")
    
    total = len(results)
    passed_count = sum(1 for _, passed in results if passed)
    percentage = (passed_count / total * 100) if total > 0 else 0
    
    print(f"\nTOTAL: {passed_count}/{total} tests passed ({percentage:.1f}%)")
    
    if percentage >= 80:
        print("\nüéâ EXIT LOGIC VERIFIED!")
        print("   PositionTracker.should_take_profit() works correctly")
        print("   PositionTracker.should_update_stop() works correctly")
        print("   Both LONG and SHORT positions supported")
    else:
        print("\n‚ö†Ô∏è  SOME TESTS FAILED")
        print("   Review failed tests above")
    
    print("="*70)
    print()
    
    return passed_count == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
