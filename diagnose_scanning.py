#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–æ—á–µ–º—É –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ã.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from breakout_bot.config import get_preset
from breakout_bot.exchange import ExchangeClient
from breakout_bot.scanner import BreakoutScanner


async def diagnose_scanning():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    
    print("=" * 80)
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Å–µ—Ç
    preset = get_preset('breakout_v1')
    
    print("\n1. –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –§–ò–õ–¨–¢–†–û–í:")
    print("-" * 80)
    lf = preset.liquidity_filters
    print(f"   min_24h_volume_usd:     ${lf.min_24h_volume_usd:,.0f}")
    print(f"   min_oi_usd:             ${lf.min_oi_usd:,.0f}")
    print(f"   max_spread_bps:         {lf.max_spread_bps}")
    print(f"   min_depth_usd_0_5pct:   ${lf.min_depth_usd_0_5pct:,.0f}")
    print(f"   min_depth_usd_0_3pct:   ${lf.min_depth_usd_0_3pct:,.0f}")
    print(f"   min_trades_per_minute:  {lf.min_trades_per_minute}")
    
    vf = preset.volatility_filters
    print(f"\n   Volatility Filters:")
    print(f"   min_atr_pct:            {vf.min_atr_pct}%")
    print(f"   max_atr_pct:            {vf.max_atr_pct}%")
    
    # –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏
    print("\n2. –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ò–†–ñ–ï...")
    print("-" * 80)
    client = ExchangeClient(preset=preset, paper_mode=True)
    await client.initialize()
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä—ã–Ω–∫–æ–≤
    print("\n3. –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –†–´–ù–ö–û–í...")
    print("-" * 80)
    all_markets = await client.fetch_markets()
    print(f"   –í—Å–µ–≥–æ —Ä—ã–Ω–∫–æ–≤: {len(all_markets)}")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞
    test_markets = all_markets[:50]  # –ü–µ—Ä–≤—ã–µ 50 –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ {len(test_markets)} —Ä—ã–Ω–∫–æ–≤")
    
    # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä—ã–Ω–∫–∞–º
    print("\n4. –ê–ù–ê–õ–ò–ó –†–´–ù–ö–û–í...")
    print("-" * 80)
    
    from breakout_bot.exchange.market_data_provider import MarketDataProvider
    mdp = MarketDataProvider(client)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total': len(test_markets),
        'volume_fail': 0,
        'oi_fail': 0,
        'spread_fail': 0,
        'depth_fail': 0,
        'trades_fail': 0,
        'passed_all': 0
    }
    
    passed_symbols = []
    
    for symbol in test_markets:
        try:
            market_data = await mdp.get_market_data(symbol)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            volume_ok = market_data.volume_24h_usd >= lf.min_24h_volume_usd
            
            # OI - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
            market_type = getattr(market_data, 'market_type', 'unknown')
            if market_type == 'spot':
                oi_ok = True
            else:
                oi_ok = (market_data.oi_usd is not None and 
                        market_data.oi_usd >= lf.min_oi_usd)
            
            # Spread
            if market_data.l2_depth:
                spread_ok = market_data.l2_depth.spread_bps <= lf.max_spread_bps
                depth_ok = (market_data.l2_depth.total_depth_usd_0_5pct >= 
                           lf.min_depth_usd_0_5pct)
            else:
                spread_ok = True  # Skip if no data
                depth_ok = True
            
            trades_ok = market_data.trades_per_minute >= lf.min_trades_per_minute
            
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if not volume_ok:
                stats['volume_fail'] += 1
            if not oi_ok:
                stats['oi_fail'] += 1
            if not spread_ok:
                stats['spread_fail'] += 1
            if not depth_ok:
                stats['depth_fail'] += 1
            if not trades_ok:
                stats['trades_fail'] += 1
            
            if volume_ok and oi_ok and spread_ok and depth_ok and trades_ok:
                stats['passed_all'] += 1
                passed_symbols.append({
                    'symbol': symbol,
                    'volume': market_data.volume_24h_usd,
                    'oi': market_data.oi_usd,
                    'spread': market_data.l2_depth.spread_bps if market_data.l2_depth else None,
                    'trades_pm': market_data.trades_per_minute
                })
        
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
            continue
    
    # –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n5. –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("=" * 80)
    print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:        {stats['total']}")
    print(f"   –ü—Ä–æ—à–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã:            {stats['passed_all']} ({stats['passed_all']/stats['total']*100:.1f}%)")
    print(f"\n   –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞:")
    print(f"   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º:         {stats['volume_fail']} ({stats['volume_fail']/stats['total']*100:.1f}%)")
    print(f"   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π OI:            {stats['oi_fail']} ({stats['oi_fail']/stats['total']*100:.1f}%)")
    print(f"   - –ë–æ–ª—å—à–æ–π —Å–ø—Ä–µ–¥:               {stats['spread_fail']} ({stats['spread_fail']/stats['total']*100:.1f}%)")
    print(f"   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≥–ª—É–±–∏–Ω–∞:       {stats['depth_fail']} ({stats['depth_fail']/stats['total']*100:.1f}%)")
    print(f"   - –ú–∞–ª–æ —Å–¥–µ–ª–æ–∫:                 {stats['trades_fail']} ({stats['trades_fail']/stats['total']*100:.1f}%)")
    
    if passed_symbols:
        print(f"\n6. –ú–û–ù–ï–¢–´, –ü–†–û–®–ï–î–®–ò–ï –í–°–ï –§–ò–õ–¨–¢–†–´ ({len(passed_symbols)}):")
        print("-" * 80)
        for item in passed_symbols[:10]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10
            print(f"   {item['symbol']:20s} Vol: ${item['volume']:>12,.0f}  "
                  f"OI: ${item['oi'] if item['oi'] else 0:>12,.0f}  "
                  f"Spread: {item['spread'] if item['spread'] else 0:>5.1f}bps  "
                  f"Trades: {item['trades_pm']:>5.1f}/min")
    else:
        print("\n‚ö†Ô∏è  –ù–ï–¢ –ú–û–ù–ï–¢, –ü–†–û–®–ï–î–®–ò–• –í–°–ï –§–ò–õ–¨–¢–†–´!")
    
    print("\n7. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 80)
    
    if stats['volume_fail'] > stats['total'] * 0.8:
        print("   ‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ù–û: –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º—É —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–π!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: min_24h_volume_usd = 1,000,000 - 5,000,000")
    
    if stats['oi_fail'] > stats['total'] * 0.8:
        print("   ‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ù–û: –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–∫—Ä—ã—Ç–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–π!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: min_oi_usd = 500,000 - 2,000,000")
    
    if stats['depth_fail'] > stats['total'] * 0.5:
        print("   ‚ö†Ô∏è  –§–∏–ª—å—Ç—Ä –ø–æ –≥–ª—É–±–∏–Ω–µ —Å—Ç–∞–∫–∞–Ω–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–π!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: min_depth_usd_0_5pct = 5,000 - 10,000")
    
    if stats['passed_all'] == 0:
        print("\n   üîß –†–ï–®–ï–ù–ò–ï: –°–º—è–≥—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞")
        print("   –§–∞–π–ª: breakout_bot/config/presets/breakout_v1.py")
        print("   –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
    
    await client.close()
    print("\n" + "=" * 80)


if __name__ == "__main__":
    asyncio.run(diagnose_scanning())
